{"org.apache.commons.codec.net.QuotedPrintableCodec": {"org.apache.commons.codec.net.QuotedPrintableCodecTest::testDecodeInvalid": [352, 356, 357, 358, 361, 365, 368, 409, 446, 449, 486]}, "org.apache.commons.codec.binary.Base64OutputStream": {"org.apache.commons.codec.binary.Base64OutputStreamTest::testCodec98NPE": [69], "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec130": [56, 69]}, "org.apache.commons.codec.digest.DigestUtils": {"org.apache.commons.codec.digest.DigestUtilsTest::testSha256": [591, 608, 623], "org.apache.commons.codec.digest.DigestUtilsTest::testMd5LengthForBytes": [134, 189, 351], "org.apache.commons.codec.digest.DigestUtilsTest::testSha512": [779, 811], "org.apache.commons.codec.digest.DigestUtilsTest::testSha384": [685, 702, 717], "org.apache.commons.codec.digest.DigestUtilsTest::testMd2Length": [134, 176, 276], "org.apache.commons.codec.digest.DigestUtilsTest::testMd2Hex": [314, 328, 340], "org.apache.commons.codec.digest.DigestUtilsTest::testInternalNoSuchAlgorithmException": [134, 136], "org.apache.commons.codec.digest.DigestUtilsTest::testMd5HexLengthForBytes": [387], "org.apache.commons.codec.digest.DigestUtilsTest::testSha1Hex": [503, 517, 529], "org.apache.commons.codec.digest.DigestUtilsTest::testSha512HexInputStream": [779, 796], "org.apache.commons.codec.digest.DigestUtilsTest::testMd5Hex": [387, 401, 412], "org.apache.commons.codec.digest.DigestUtilsTest::testMd2HexLength": [314], "org.apache.commons.codec.digest.DigestUtilsTest::testShaHex": [503, 517, 529, 824, 840, 853]}, "org.apache.commons.codec.net.URLCodec": {"org.apache.commons.codec.net.URLCodecTest::testDecodeInvalid": [162, 166, 167, 168, 170, 172, 173, 176, 210, 270, 273, 289, 293]}, "org.apache.commons.codec.binary.BaseNCodecInputStream": {"org.apache.commons.codec.binary.Base64InputStreamTest::testSkipBig": [42, 45, 46, 47, 97, 98, 101, 105, 135, 138, 155, 156, 157, 158, 159, 162, 165, 167, 197, 198, 200, 201, 202, 203, 206, 209], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipNone": [42, 45, 46, 47, 97, 98, 101, 105, 135, 138, 155, 156, 157, 158, 159, 162, 165, 167, 198, 200, 209], "org.apache.commons.codec.binary.Base64InputStreamTest::testInputStreamReader": [42, 45, 46, 47, 135, 138, 155, 156, 157, 158, 159, 162, 165, 167], "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec98NPE": [42, 45, 46, 47, 135, 138, 155, 156, 157, 158, 159, 162, 165, 167], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipToEnd": [42, 45, 46, 47, 97, 98, 101, 105, 135, 138, 155, 156, 157, 158, 159, 162, 165, 167, 197, 198, 200, 201, 202, 203, 206, 209], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipPastEnd": [42, 45, 46, 47, 97, 98, 101, 105, 135, 138, 155, 156, 157, 158, 159, 162, 165, 167, 197, 198, 200, 201, 202, 203, 206, 209], "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec130": [42, 45, 46, 47, 135, 138, 155, 156, 157, 158, 159, 162, 165, 167, 197, 198, 200, 201, 202], "org.apache.commons.codec.binary.Base64InputStreamTest::testReadNull": [129, 130], "org.apache.commons.codec.binary.Base64InputStreamTest::testReadOutOfBounds": [131, 132, 133, 134], "org.apache.commons.codec.binary.Base64InputStreamTest::testMarkSupported": [85], "org.apache.commons.codec.binary.Base64InputStreamTest::testRead0": [135, 136], "org.apache.commons.codec.binary.Base64InputStreamTest::testAvailable": [42, 45, 46, 47, 64, 97, 98, 101, 105, 135, 138, 155, 156, 157, 158, 159, 162, 165, 167, 197, 198, 200, 201, 202, 203, 206, 209], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipWrongArgument": [192, 193], "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec101": [42, 45, 46, 47, 135, 138, 155, 156, 157, 158, 159, 162, 165, 167], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipToEnd": [42, 45, 46, 47, 97, 98, 101, 105, 135, 138, 155, 156, 157, 158, 159, 162, 165, 167, 197, 198, 200, 201, 202, 203, 206, 209], "org.apache.commons.codec.binary.Base32InputStreamTest::testAvailable": [42, 45, 46, 47, 64, 97, 98, 101, 105, 135, 138, 155, 156, 157, 158, 159, 162, 165, 167, 197, 198, 200, 201, 202, 203, 206, 209], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipPastEnd": [42, 45, 46, 47, 97, 98, 101, 105, 135, 138, 155, 156, 157, 158, 159, 162, 165, 167, 197, 198, 200, 201, 202, 203, 206, 209], "org.apache.commons.codec.binary.Base32InputStreamTest::testReadNull": [129, 130], "org.apache.commons.codec.binary.Base32InputStreamTest::testCodec130": [42, 45, 46, 47, 135, 138, 155, 156, 157, 158, 159, 162, 165, 167, 197, 198, 200, 201, 202], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipNone": [42, 45, 46, 47, 97, 98, 101, 105, 135, 138, 155, 156, 157, 158, 159, 162, 165, 167, 198, 200, 209], "org.apache.commons.codec.binary.Base32InputStreamTest::testRead0": [135, 136], "org.apache.commons.codec.binary.Base32InputStreamTest::testMarkSupported": [85], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipBig": [42, 45, 46, 47, 97, 98, 101, 105, 135, 138, 155, 156, 157, 158, 159, 162, 165, 167, 197, 198, 200, 201, 202, 203, 206, 209], "org.apache.commons.codec.binary.Base32InputStreamTest::testReadOutOfBounds": [131, 132, 133, 134], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipWrongArgument": [192, 193]}, "org.apache.commons.codec.binary.Hex": {"org.apache.commons.codec.digest.DigestUtilsTest::testShaUpdateWithByteArray": [226], "org.apache.commons.codec.digest.DigestUtilsTest::testSha256": [226], "org.apache.commons.codec.digest.DigestUtilsTest::testSha1UpdateWithByteBuffer": [226], "org.apache.commons.codec.digest.DigestUtilsTest::testSha512": [226], "org.apache.commons.codec.digest.DigestUtilsTest::testSha384": [226], "org.apache.commons.codec.digest.DigestUtilsTest::testSha1UpdateWithByteArray": [226], "org.apache.commons.codec.digest.DigestUtilsTest::testMd2Hex": [226], "org.apache.commons.codec.digest.DigestUtilsTest::testShaUpdateWithString": [226], "org.apache.commons.codec.digest.DigestUtilsTest::testMd5HexLengthForBytes": [226], "org.apache.commons.codec.digest.DigestUtilsTest::testSha1Hex": [226], "org.apache.commons.codec.digest.DigestUtilsTest::testSha512HexInputStream": [226], "org.apache.commons.codec.digest.DigestUtilsTest::testMd5Hex": [226], "org.apache.commons.codec.digest.DigestUtilsTest::testMd2HexLength": [226], "org.apache.commons.codec.digest.DigestUtilsTest::testSha1UpdateWithString": [226], "org.apache.commons.codec.digest.DigestUtilsTest::testShaHex": [226], "org.apache.commons.codec.binary.HexTest::testDecodeByteArrayEmpty": [96, 102, 105, 113, 298, 340, 469], "org.apache.commons.codec.binary.HexTest::testDecodeByteBufferObjectEmpty": [96, 102, 105, 113, 298, 357, 375, 377, 379, 380, 469], "org.apache.commons.codec.binary.HexTest::testDecodeByteBufferOddCharacters": [96, 98, 99, 298, 357, 469], "org.apache.commons.codec.binary.HexTest::testGetCharset": [309, 469], "org.apache.commons.codec.binary.HexTest::testDecodeBadCharacterPos1": [96, 105, 107, 108, 284, 285, 286, 375, 376, 377, 379, 383], "org.apache.commons.codec.binary.HexTest::testEncodeHexByteString_ByteArrayBoolean_ToLowerCase": [241], "org.apache.commons.codec.binary.HexTest::testDecodeStringEmpty": [375, 376], "org.apache.commons.codec.binary.HexTest::testEncodeHexByteArrayHelloWorldLowerCaseHex": [126, 156, 189, 190, 192, 196], "org.apache.commons.codec.binary.HexTest::testGetCharsetName": [309, 479], "org.apache.commons.codec.binary.HexTest::testCustomCharsetBadName": [323], "org.apache.commons.codec.binary.HexTest::testEncodeHexByteString_ByteBufferOfZeroes": [254], "org.apache.commons.codec.binary.HexTest::testEncodeHexByteBufferHelloWorldLowerCaseHex": [140, 172, 189, 190, 192, 196, 213], "org.apache.commons.codec.binary.HexTest::testEncodeByteArrayEmpty": [226, 298, 407, 469], "org.apache.commons.codec.binary.HexTest::testCustomCharsetToString": [489], "org.apache.commons.codec.binary.HexTest::testEncodeHexByteBufferHelloWorldUpperCaseHex": [140, 172, 189, 190, 192, 196, 213], "org.apache.commons.codec.binary.HexTest::testEncodeHexByteBufferEmpty": [140, 172, 189, 190, 192, 196, 213, 254, 298, 426, 469], "org.apache.commons.codec.binary.HexTest::testEncodeClassCastException": [448, 450, 454, 456], "org.apache.commons.codec.binary.HexTest::testEncodeHexByteString_ByteBufferBoolean_ToUpperCase": [269], "org.apache.commons.codec.binary.HexTest::testDecodeHexStringEmpty": [80, 96, 102, 105, 113], "org.apache.commons.codec.binary.HexTest::testEncodeHexByteArrayHelloWorldUpperCaseHex": [126, 156, 189, 190, 192, 196], "org.apache.commons.codec.binary.HexTest::testEncodeHexByteString_ByteArrayOfZeroes": [226], "org.apache.commons.codec.binary.HexTest::testEncodeHexByteString_ByteArrayBoolean_ToUpperCase": [241], "org.apache.commons.codec.binary.HexTest::testEncodeDecodeHexCharArrayRandom": [96, 102, 105, 107, 109, 113, 126, 156, 189, 190, 192, 196, 226, 298, 340, 375, 376, 377, 379, 383, 407, 448, 449, 459, 469], "org.apache.commons.codec.binary.HexTest::testDecodeByteBufferEmpty": [96, 102, 105, 113, 298, 357, 469], "org.apache.commons.codec.binary.HexTest::testDecodeByteArrayOddCharacters": [96, 98, 99, 298, 340, 469], "org.apache.commons.codec.binary.HexTest::testEncodeHexByteArrayEmpty": [126, 156, 189, 190, 192, 196, 226, 298, 407, 469], "org.apache.commons.codec.binary.HexTest::testEncodeByteBufferEmpty": [254, 298, 426, 469], "org.apache.commons.codec.binary.HexTest::testDecodeBadCharacterPos0": [96, 105, 106, 284, 285, 286, 375, 376, 377, 379, 383], "org.apache.commons.codec.binary.HexTest::testDecodeByteArrayObjectEmpty": [96, 102, 105, 113, 298, 340, 375, 377, 378, 469], "org.apache.commons.codec.binary.HexTest::testEncodeByteBufferObjectEmpty": [126, 156, 189, 190, 192, 196, 448, 450, 451, 459], "org.apache.commons.codec.binary.HexTest::testEncodeHexByteArrayZeroes": [126, 156, 189, 190, 192, 196], "org.apache.commons.codec.binary.HexTest::testEncodeStringEmpty": [126, 156, 189, 190, 192, 196, 298, 448, 449, 459, 469], "org.apache.commons.codec.binary.HexTest::testEncodeByteArrayObjectEmpty": [126, 156, 189, 190, 192, 196, 448, 450, 454, 459], "org.apache.commons.codec.binary.HexTest::testDecodeHexStringOddCharacters": [96, 98, 99, 375, 376, 377, 379, 383], "org.apache.commons.codec.binary.HexTest::testEncodeHex_ByteBufferOfZeroes": [140, 172, 189, 190, 192, 196, 213], "org.apache.commons.codec.binary.HexTest::testDecodeHexCharArrayEmpty": [96, 102, 105, 113], "org.apache.commons.codec.binary.HexTest::testDecodeClassCastException": [375, 377, 379, 383, 385], "org.apache.commons.codec.binary.HexTest::testEncodeHexByteString_ByteBufferBoolean_ToLowerCase": [269], "org.apache.commons.codec.binary.Base64Test::testStringToByteVariations": [80, 96, 102, 105, 107, 109, 113], "org.apache.commons.codec.binary.Base64Test::testUUID": [80, 96, 102, 105, 107, 109, 113], "org.apache.commons.codec.binary.Base64Test::testByteToStringVariations": [80, 96, 102, 105, 107, 109, 113]}, "org.apache.commons.codec.binary.StringUtils": {"org.apache.commons.codec.net.URLCodecTest::testDecodeInvalid": [94, 97, 199], "org.apache.commons.codec.net.QuotedPrintableCodecTest::testDecodeInvalid": [94, 97, 199], "org.apache.commons.codec.digest.DigestUtilsTest::testSha256": [94, 97, 271], "org.apache.commons.codec.digest.DigestUtilsTest::testMd5LengthForBytes": [94, 97, 271], "org.apache.commons.codec.digest.DigestUtilsTest::testSha512": [94, 97, 271], "org.apache.commons.codec.digest.DigestUtilsTest::testSha384": [94, 97, 271], "org.apache.commons.codec.digest.DigestUtilsTest::testMd2Length": [94, 97, 271], "org.apache.commons.codec.digest.DigestUtilsTest::testSha1Hex": [94, 97, 271], "org.apache.commons.codec.digest.DigestUtilsTest::testShaHex": [94, 97, 271], "org.apache.commons.codec.binary.StringUtilsTest::testGetBytesUtf16Le": [94, 97, 174, 178, 253], "org.apache.commons.codec.binary.StringUtilsTest::testNewStringUtf8": [293, 419], "org.apache.commons.codec.binary.StringUtilsTest::testNewStringUsAscii": [293, 316, 320, 355], "org.apache.commons.codec.binary.StringUtilsTest::testGetBytesUncheckedBadName": [174, 178, 180, 276], "org.apache.commons.codec.binary.StringUtilsTest::testNewStringNullInput_CODEC229": [293, 339, 355, 371, 387, 403, 419], "org.apache.commons.codec.binary.StringUtilsTest::testGetBytesUncheckedNullInput": [174, 175], "org.apache.commons.codec.binary.StringUtilsTest::testGetBytesUsAscii": [94, 97, 174, 178, 199], "org.apache.commons.codec.binary.StringUtilsTest::testGetBytesUtf16": [94, 97, 174, 178, 217], "org.apache.commons.codec.binary.StringUtilsTest::testGetBytesIso8859_1": [94, 97, 150, 174, 178], "org.apache.commons.codec.binary.StringUtilsTest::testNewStringIso8859_1": [293, 316, 320, 339], "org.apache.commons.codec.binary.StringUtilsTest::testGetBytesUtf16Be": [94, 97, 174, 178, 235], "org.apache.commons.codec.binary.StringUtilsTest::testNewStringNullInput": [316, 317], "org.apache.commons.codec.binary.StringUtilsTest::testNewStringUtf16Le": [293, 316, 320, 403], "org.apache.commons.codec.binary.StringUtilsTest::testNewStringUtf16": [293, 316, 320, 371], "org.apache.commons.codec.binary.StringUtilsTest::testGetBytesUtf8": [94, 97, 271], "org.apache.commons.codec.binary.StringUtilsTest::testNewStringUtf16Be": [293, 316, 320, 387], "org.apache.commons.codec.binary.StringUtilsTest::testNewStringBadEnc": [276, 316, 320, 322], "org.apache.commons.codec.binary.HexTest::testEncodeHexByteArrayHelloWorldLowerCaseHex": [94, 97, 271], "org.apache.commons.codec.binary.HexTest::testEncodeHexByteBufferHelloWorldLowerCaseHex": [111, 114, 132], "org.apache.commons.codec.binary.HexTest::testEncodeHexByteBufferHelloWorldUpperCaseHex": [111, 114, 132], "org.apache.commons.codec.binary.HexTest::testEncodeHexByteArrayHelloWorldUpperCaseHex": [94, 97, 271], "org.apache.commons.codec.binary.HexTest::testEncodeDecodeHexCharArrayRandom": [94, 97, 271], "org.apache.commons.codec.binary.BaseNCodecTest::testIsInAlphabetString": [94, 97, 271], "org.apache.commons.codec.binary.Base64Test::testConstructor_Int_ByteArray_Boolean": [293, 419], "org.apache.commons.codec.binary.Base64Test::testIsStringBase64": [0], "org.apache.commons.codec.binary.Base64Test::testStringToByteVariations": [94, 95, 97, 271, 293, 419], "org.apache.commons.codec.binary.Base64Test::testDecodeWithInnerPad": [94, 97, 271], "org.apache.commons.codec.binary.Base64Test::testUUID": [94, 97, 271], "org.apache.commons.codec.binary.Base64Test::testRfc4648Section10Encode": [94, 97, 271, 293, 419], "org.apache.commons.codec.binary.Base64Test::testByteToStringVariations": [94, 97, 271, 293, 419], "org.apache.commons.codec.binary.Base64Test::testConstructor_Int_ByteArray_Boolean_UrlSafe": [293, 419], "org.apache.commons.codec.binary.Base64Test::testRfc4648Section10DecodeWithCrLf": [94, 97, 271, 293, 355], "org.apache.commons.codec.binary.Base64Test::testChunkedEncodeMultipleOf76": [94, 97, 271], "org.apache.commons.codec.binary.Base64Test::testRfc4648Section10Decode": [94, 97, 271, 293, 355], "org.apache.commons.codec.binary.Base64Test::testBase64": [94, 97, 271, 293, 419], "org.apache.commons.codec.binary.Base64OutputStreamTest::testCodec98NPE": [293, 419], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipBig": [94, 97, 150], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipNone": [94, 97, 150], "org.apache.commons.codec.binary.Base64InputStreamTest::testInputStreamReader": [94, 97, 271], "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec98NPE": [94, 97, 271, 293, 419], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipToEnd": [94, 97, 150], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipPastEnd": [94, 97, 150], "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec130": [94, 97, 271, 293, 419], "org.apache.commons.codec.binary.Base64InputStreamTest::testAvailable": [94, 97, 150], "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec101": [94, 97, 271], "org.apache.commons.codec.binary.Base32Test::testBase32HexSamples": [293, 419], "org.apache.commons.codec.binary.Base32Test::testBase32Chunked": [293, 419], "org.apache.commons.codec.binary.Base32Test::testBase32Samples": [293, 419], "org.apache.commons.codec.binary.Base32Test::testBase32SamplesNonDefaultPadding": [293, 419], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipToEnd": [94, 97, 150], "org.apache.commons.codec.binary.Base32InputStreamTest::testAvailable": [94, 97, 150], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipPastEnd": [94, 97, 150], "org.apache.commons.codec.binary.Base32InputStreamTest::testCodec130": [94, 97, 271, 293, 419], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipNone": [94, 97, 150], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipBig": [94, 97, 150]}, "org.apache.commons.codec.binary.Base32": {"org.apache.commons.codec.binary.Base32Test::testRandomBytes": [159, 181, 281, 434, 439, 441, 446, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 499, 500, 501, 507, 508, 509, 510, 511, 512, 513, 514, 515], "org.apache.commons.codec.binary.Base32Test::testRandomBytesHex": [181, 281, 434, 439, 441, 446, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 499, 500, 501, 507, 508, 509, 510, 511, 512, 513, 514, 515], "org.apache.commons.codec.binary.Base32Test::testRandomBytesChunked": [208, 230, 281, 290, 300, 434, 439, 441, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 492, 494, 496, 499, 500, 501, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520], "org.apache.commons.codec.binary.Base32Test::testBase32HexSamples": [434, 439, 441, 446, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 499, 500, 501, 507, 508, 509, 510, 511, 512, 513, 514, 515], "org.apache.commons.codec.binary.Base32Test::testBase32Chunked": [208, 230, 281, 290, 300, 434, 439, 441, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 492, 494, 496, 499, 500, 501, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516], "org.apache.commons.codec.binary.Base32Test::testBase32Samples": [434, 439, 441, 446, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 499, 500, 501, 507, 508, 509, 510, 511, 512, 513, 514, 515], "org.apache.commons.codec.binary.Base32Test::testBase32SamplesNonDefaultPadding": [434, 439, 441, 446, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 499, 500, 501, 507, 508, 509, 510, 511, 512, 513, 514, 515], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipToEnd": [181, 281, 283, 288, 339, 345, 346, 347, 349, 352, 353, 354, 355, 356, 373, 377, 391, 392, 393], "org.apache.commons.codec.binary.Base32InputStreamTest::testAvailable": [181, 281, 283, 288, 339, 345, 346, 347, 349, 352, 353, 354, 355, 356, 373, 377, 391, 392, 393], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipPastEnd": [181, 281, 283, 288, 339, 345, 346, 347, 349, 352, 353, 354, 355, 356, 373, 377, 391, 392, 393], "org.apache.commons.codec.binary.Base32InputStreamTest::testCodec130": [181, 281, 283, 288, 339, 345, 346, 347, 349, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 373, 377, 379, 434, 439, 441, 444, 446, 450, 451, 452, 453, 454, 455, 456, 457, 499, 500, 501, 507, 508, 509, 510, 511, 512, 513, 514, 515], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipNone": [181, 281, 283, 288, 339, 345, 346, 347, 349, 352, 353, 354, 355, 356, 373, 377, 391, 392, 393], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipBig": [181, 281, 283, 288, 339, 345, 346, 347, 349, 352, 353, 354, 355, 356, 373, 377, 391, 392, 393]}, "org.apache.commons.codec.language.DoubleMetaphone": {"org.apache.commons.codec.language.DoubleMetaphoneTest::testSetMaxCodeLength": [60, 87, 88, 93, 95, 97, 98, 105, 133, 144, 156, 190, 253, 261, 273, 516, 538, 541, 544, 569, 574, 576, 844, 847, 875, 876, 877, 882, 889, 892, 893, 896, 905, 908, 917, 918, 919, 921, 922, 928]}, "org.apache.commons.codec.binary.BaseNCodecOutputStream": {"org.apache.commons.codec.binary.Base64OutputStreamTest::testCodec98NPE": [48, 52, 53, 54, 97, 98, 101, 103, 117, 118, 120, 121, 122, 138, 155, 156, 169, 172], "org.apache.commons.codec.binary.Base64OutputStreamTest::testWriteToNullCoverage": [91, 92], "org.apache.commons.codec.binary.Base64OutputStreamTest::testWriteOutOfBounds": [93, 94, 95, 96], "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec130": [48, 52, 53, 54, 97, 98, 99, 103, 117, 118, 120, 121, 122, 138, 155, 156, 169, 170], "org.apache.commons.codec.binary.Base32OutputStreamTest::testWriteToNullCoverage": [91, 92], "org.apache.commons.codec.binary.Base32OutputStreamTest::testWriteOutOfBounds": [93, 94, 95, 96], "org.apache.commons.codec.binary.Base32InputStreamTest::testCodec130": [48, 52, 54, 97, 98, 99, 103, 117, 118, 120, 121, 122, 138, 155, 156, 169, 170]}, "org.apache.commons.codec.binary.BaseNCodec": {"org.apache.commons.codec.binary.BaseNCodecTest::testProvidePaddingByte": [212], "org.apache.commons.codec.binary.BaseNCodecTest::testContainsAlphabetOrPad": [192, 212, 516, 517, 519, 520, 521, 524], "org.apache.commons.codec.binary.BaseNCodecTest::testIsInAlphabetString": [192, 212, 312, 317, 484, 485, 490, 503], "org.apache.commons.codec.binary.BaseNCodecTest::testIsInAlphabetByteArrayBoolean": [192, 212, 312, 317, 484, 485, 487, 490], "org.apache.commons.codec.binary.BaseNCodecTest::testIsWhiteSpace": [312, 317], "org.apache.commons.codec.binary.Base64Test::testConstructors": [192, 212, 516, 519, 520, 521], "org.apache.commons.codec.binary.Base64Test::testIgnoringNonBase64InDecode": [192, 212, 249, 251, 269, 270, 406, 409, 410, 412, 414], "org.apache.commons.codec.binary.Base64Test::testObjectDecodeWithInvalidParameter": [377, 379, 382], "org.apache.commons.codec.binary.Base64Test::testTripletsChunked": [192, 208, 209, 249, 251, 252, 269, 270, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testObjectEncodeWithValidParameter": [192, 212, 249, 251, 252, 269, 270, 338, 406, 409, 410, 412, 414, 426, 429, 446, 449, 450, 452, 454], "org.apache.commons.codec.binary.Base64Test::testConstructor_Int_ByteArray_Boolean": [192, 208, 209, 249, 251, 252, 269, 270, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testDecodePadOnlyChunked": [249, 251, 269, 270, 406, 409, 410, 412, 414], "org.apache.commons.codec.binary.Base64Test::testEncodeDecodeRandom": [192, 212, 249, 251, 252, 269, 270, 406, 409, 410, 412, 414, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testIsUrlSafe": [312, 317], "org.apache.commons.codec.binary.Base64Test::testCodeInteger1": [249, 251, 252, 269, 270, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testIsStringBase64": [0], "org.apache.commons.codec.binary.Base64Test::testTriplets": [249, 251, 252, 269, 270, 426, 429, 446, 449, 450, 452, 454], "org.apache.commons.codec.binary.Base64Test::testEmptyBase64": [406, 407], "org.apache.commons.codec.binary.Base64Test::testDecodePadMarkerIndex2": [192, 212, 249, 251, 269, 270, 406, 409, 410, 412, 414], "org.apache.commons.codec.binary.Base64Test::testDecodePadMarkerIndex3": [192, 212, 249, 251, 269, 270, 406, 409, 410, 412, 414], "org.apache.commons.codec.binary.Base64Test::testKnownEncodings": [192, 208, 209, 249, 251, 252, 269, 270, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testStringToByteVariations": [192, 212, 249, 251, 269, 270, 377, 379, 380, 394, 406, 407, 409, 410, 411, 412, 414], "org.apache.commons.codec.binary.Base64Test::testIsArrayByteBase64": [312, 319], "org.apache.commons.codec.binary.Base64Test::testNonBase64Test": [249, 251, 269, 270, 312, 319, 406, 409, 410, 412, 414], "org.apache.commons.codec.binary.Base64Test::testDecodeWithInnerPad": [192, 212, 249, 251, 269, 270, 394, 406, 409, 410, 412, 414], "org.apache.commons.codec.binary.Base64Test::testEncodeDecodeSmall": [192, 212, 249, 251, 252, 269, 270, 406, 407, 409, 410, 412, 414, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testUUID": [192, 212, 249, 251, 252, 269, 270, 406, 409, 410, 411, 412, 414, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testRfc4648Section10Encode": [249, 251, 252, 269, 270, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testByteToStringVariations": [249, 251, 252, 269, 270, 350, 426, 427, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testCodeInteger2": [249, 251, 252, 269, 270, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testPairs": [192, 212, 249, 251, 252, 269, 270, 406, 409, 410, 412, 414, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testCodeInteger3": [249, 251, 252, 269, 270, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testSingletonsChunked": [192, 208, 209, 249, 251, 252, 269, 270, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testSingletons": [192, 212, 249, 251, 252, 269, 270, 406, 409, 410, 412, 414, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testKnownDecodings": [192, 212, 249, 251, 269, 270, 406, 409, 410, 412, 414], "org.apache.commons.codec.binary.Base64Test::testConstructor_Int_ByteArray_Boolean_UrlSafe": [192, 208, 209, 249, 251, 252, 269, 270, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testRfc4648Section10DecodeWithCrLf": [192, 212, 249, 251, 269, 270, 394, 406, 409, 410, 412, 414], "org.apache.commons.codec.binary.Base64Test::testObjectEncodeWithInvalidParameter": [335, 336], "org.apache.commons.codec.binary.Base64Test::testObjectDecodeWithValidParameter": [192, 212, 249, 251, 252, 269, 270, 377, 378, 406, 409, 410, 412, 414, 426, 429, 446, 449, 450, 452, 454], "org.apache.commons.codec.binary.Base64Test::testCodeInteger4": [249, 251, 252, 269, 270, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testDecodeWithWhitespace": [192, 212, 249, 251, 269, 270, 406, 409, 410, 412, 414], "org.apache.commons.codec.binary.Base64Test::testChunkedEncodeMultipleOf76": [192, 208, 209, 249, 251, 252, 269, 270, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testRfc4648Section10Decode": [192, 212, 249, 251, 269, 270, 394, 406, 407, 409, 410, 412, 414], "org.apache.commons.codec.binary.Base64Test::testDecodePadOnly": [249, 251, 269, 270, 406, 407, 409, 410, 412, 414], "org.apache.commons.codec.binary.Base64Test::testObjectEncode": [249, 251, 252, 269, 270, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testBase64": [192, 212, 249, 251, 252, 269, 270, 394, 406, 409, 410, 412, 414, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64Test::testUrlSafe": [192, 212, 249, 251, 252, 269, 270, 406, 407, 409, 410, 411, 412, 414, 426, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base64OutputStreamTest::testCodec98NPE": [192, 212, 232, 241, 249, 250, 251, 252, 269, 270, 292, 293, 295, 296, 297, 299], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipBig": [192, 212, 222, 232, 241, 249, 250, 251, 252, 269, 270, 292, 293, 295, 296, 297, 299, 301], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipNone": [192, 212, 222, 232, 241, 249, 250, 251, 252, 269, 270, 292, 293, 295, 296, 297, 301], "org.apache.commons.codec.binary.Base64InputStreamTest::testInputStreamReader": [192, 212, 222, 232, 241, 249, 250, 251, 252, 269, 270, 292, 293, 295, 296, 297, 299], "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec98NPE": [192, 212, 222, 232, 241, 249, 250, 251, 252, 269, 270, 292, 293, 295, 296, 297, 299, 301], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipToEnd": [192, 212, 222, 232, 241, 249, 250, 251, 252, 269, 270, 292, 293, 295, 296, 297, 299, 301], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipPastEnd": [192, 212, 222, 232, 241, 249, 250, 251, 252, 269, 270, 292, 293, 295, 296, 297, 299, 301], "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec130": [192, 208, 209, 212, 222, 232, 241, 249, 250, 251, 252, 269, 270, 292, 293, 295, 296, 297, 299, 301], "org.apache.commons.codec.binary.Base64InputStreamTest::testAvailable": [192, 212, 222, 232, 241, 249, 250, 251, 252, 269, 270, 292, 293, 295, 296, 297, 299, 301], "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec101": [192, 212, 222, 232, 241, 249, 250, 251, 252, 269, 270, 292, 293, 295, 296, 297, 299, 301], "org.apache.commons.codec.binary.Base32Test::testRandomBytes": [206, 207, 208, 209, 249, 251, 252, 269, 270, 426, 427, 429, 446, 449, 450, 451, 452, 454, 538, 543], "org.apache.commons.codec.binary.Base32Test::testRandomBytesHex": [206, 207, 208, 209, 249, 251, 252, 269, 270, 426, 427, 429, 446, 449, 450, 451, 452, 454, 538, 543], "org.apache.commons.codec.binary.Base32Test::testRandomBytesChunked": [206, 207, 208, 209, 210, 249, 251, 252, 269, 270, 426, 427, 429, 446, 449, 450, 451, 452, 454, 538, 539, 541, 543], "org.apache.commons.codec.binary.Base32Test::testBase32HexSamples": [249, 251, 252, 269, 270, 361, 426, 427, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base32Test::testBase32Chunked": [208, 209, 249, 251, 252, 269, 270, 361, 426, 427, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base32Test::testBase32Samples": [249, 251, 252, 269, 270, 361, 426, 427, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base32Test::testBase32SamplesNonDefaultPadding": [249, 251, 252, 269, 270, 361, 426, 427, 429, 446, 449, 450, 451, 452, 454], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipToEnd": [212, 222, 232, 241, 249, 250, 251, 252, 269, 270, 292, 293, 295, 296, 297, 299, 301], "org.apache.commons.codec.binary.Base32InputStreamTest::testAvailable": [212, 222, 232, 241, 249, 250, 251, 252, 269, 270, 292, 293, 295, 296, 297, 299, 301], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipPastEnd": [212, 222, 232, 241, 249, 250, 251, 252, 269, 270, 292, 293, 295, 296, 297, 299, 301], "org.apache.commons.codec.binary.Base32InputStreamTest::testCodec130": [212, 222, 232, 241, 249, 250, 251, 252, 269, 270, 292, 293, 295, 296, 297, 299, 301], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipNone": [212, 222, 232, 241, 249, 250, 251, 252, 269, 270, 292, 293, 295, 296, 297, 301], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipBig": [212, 222, 232, 241, 249, 250, 251, 252, 269, 270, 292, 293, 295, 296, 297, 299, 301]}, "org.apache.commons.codec.binary.Base64InputStream": {"org.apache.commons.codec.binary.Base64InputStreamTest::testSkipBig": [52, 65], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipNone": [52, 65], "org.apache.commons.codec.binary.Base64InputStreamTest::testInputStreamReader": [52, 65], "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec98NPE": [52, 65], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipToEnd": [52, 65], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipPastEnd": [52, 65], "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec130": [52, 65], "org.apache.commons.codec.binary.Base64InputStreamTest::testAvailable": [52, 65], "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec101": [52, 65]}, "org.apache.commons.codec.binary.Base32OutputStream": {"org.apache.commons.codec.binary.Base32InputStreamTest::testCodec130": [52, 65]}, "org.apache.commons.codec.binary.Base64": {"org.apache.commons.codec.binary.Base64Test::testConstructors": [145, 244, 275, 280, 281, 283, 782], "org.apache.commons.codec.binary.Base64Test::testIgnoringNonBase64InDecode": [175, 217, 244, 275, 431, 437, 438, 439, 440, 442, 445, 446, 447, 448, 450, 451, 452, 453, 462, 467, 474, 707], "org.apache.commons.codec.binary.Base64Test::testTripletsChunked": [194, 275, 280, 285, 287, 334, 339, 341, 345, 373, 375, 377, 380, 381, 382, 388, 389, 390, 391, 392, 393, 607, 622, 641, 663, 669, 678], "org.apache.commons.codec.binary.Base64Test::testObjectEncodeWithValidParameter": [175, 217, 244, 275, 334, 339, 380, 381, 382, 388, 389, 390, 391, 392, 431, 437, 438, 439, 440, 445, 446, 447, 448, 450, 451, 452, 453, 707], "org.apache.commons.codec.binary.Base64Test::testConstructor_Int_ByteArray_Boolean": [275, 280, 285, 287, 298, 334, 339, 341, 345, 346, 362, 363, 364, 366, 367, 373, 375, 377, 380, 381, 382, 388, 389, 390, 391, 392, 393, 394, 396, 397], "org.apache.commons.codec.binary.Base64Test::testDecodePadOnlyChunked": [431, 437, 438, 707], "org.apache.commons.codec.binary.Base64Test::testEncodeDecodeRandom": [175, 217, 244, 275, 298, 334, 339, 341, 346, 351, 353, 355, 356, 357, 362, 363, 364, 366, 367, 380, 381, 382, 388, 389, 390, 391, 392, 431, 437, 438, 439, 440, 442, 445, 446, 447, 448, 450, 451, 452, 453, 462, 467, 474, 478, 479, 511, 539, 540, 544, 555, 622, 641, 663, 669, 678, 707], "org.apache.commons.codec.binary.Base64Test::testIsUrlSafe": [194, 298, 308, 511, 539, 540, 544], "org.apache.commons.codec.binary.Base64Test::testCodeInteger1": [298, 334, 339, 341, 346, 362, 363, 364, 366, 367, 380, 381, 382, 388, 389, 390, 391, 392, 622, 641, 663, 669, 678, 722, 739, 750, 752, 755, 768, 770], "org.apache.commons.codec.binary.Base64Test::testIsStringBase64": [511, 525, 539, 0], "org.apache.commons.codec.binary.Base64Test::testTriplets": [334, 339, 380, 381, 382, 388, 389, 390, 391, 392, 555, 622, 641, 663, 678], "org.apache.commons.codec.binary.Base64Test::testEmptyBase64": [555, 622, 641, 663, 664, 707], "org.apache.commons.codec.binary.Base64Test::testDecodePadMarkerIndex2": [175, 217, 244, 275, 431, 437, 438, 439, 440, 442, 445, 446, 447, 448, 462, 467, 474, 707], "org.apache.commons.codec.binary.Base64Test::testDecodePadMarkerIndex3": [175, 217, 244, 275, 431, 437, 438, 439, 440, 442, 445, 446, 447, 448, 450, 451, 452, 453, 462, 467, 478, 479, 707], "org.apache.commons.codec.binary.Base64Test::testKnownEncodings": [194, 275, 280, 285, 287, 298, 334, 339, 341, 345, 346, 351, 353, 355, 356, 357, 362, 363, 364, 366, 367, 373, 375, 377, 380, 381, 382, 388, 389, 390, 391, 392, 393, 394, 396, 397, 555, 607, 622, 641, 663, 669, 678], "org.apache.commons.codec.binary.Base64Test::testStringToByteVariations": [175, 217, 244, 275, 431, 434, 435, 437, 438, 439, 440, 442, 445, 446, 447, 448, 450, 451, 452, 453, 462, 467, 474, 478, 479, 693], "org.apache.commons.codec.binary.Base64Test::testIsArrayByteBase64": [511, 539, 540, 541, 544], "org.apache.commons.codec.binary.Base64Test::testNonBase64Test": [431, 437, 438, 511, 539, 540, 541], "org.apache.commons.codec.binary.Base64Test::testDecodeWithInnerPad": [175, 217, 244, 275, 431, 437, 438, 439, 440, 442, 445, 446, 447, 448, 450, 451, 452, 453, 462, 467, 478, 479, 693], "org.apache.commons.codec.binary.Base64Test::testEncodeDecodeSmall": [175, 217, 244, 275, 298, 334, 339, 341, 346, 351, 353, 355, 356, 357, 362, 363, 364, 366, 367, 380, 381, 382, 388, 389, 390, 391, 392, 431, 437, 438, 439, 440, 442, 445, 446, 447, 448, 450, 451, 452, 453, 462, 467, 474, 478, 479, 511, 539, 540, 544, 555, 622, 641, 663, 664, 669, 678, 707], "org.apache.commons.codec.binary.Base64Test::testUUID": [175, 217, 244, 275, 298, 334, 339, 341, 346, 351, 353, 355, 356, 357, 380, 381, 382, 388, 389, 390, 391, 392, 431, 434, 435, 437, 438, 439, 440, 442, 445, 446, 447, 448, 450, 451, 452, 453, 462, 467, 474, 555, 583, 622, 641, 663, 669, 678, 707], "org.apache.commons.codec.binary.Base64Test::testRfc4648Section10Encode": [298, 334, 339, 341, 346, 351, 353, 355, 356, 357, 362, 363, 364, 366, 367, 380, 381, 382, 388, 389, 390, 391, 392, 570, 622, 641, 663, 664, 669, 678], "org.apache.commons.codec.binary.Base64Test::testByteToStringVariations": [217, 244, 298, 334, 339, 341, 346, 351, 353, 355, 356, 357, 362, 363, 364, 366, 367, 380, 381, 382, 388, 389, 390, 391, 392, 570, 596, 622, 641, 663, 664, 669, 678], "org.apache.commons.codec.binary.Base64Test::testCodeInteger2": [298, 334, 339, 341, 346, 362, 363, 364, 366, 367, 380, 381, 382, 388, 389, 390, 391, 392, 622, 641, 663, 669, 678, 722, 739, 750, 752, 755, 768, 770], "org.apache.commons.codec.binary.Base64Test::testPairs": [175, 217, 244, 275, 298, 334, 339, 341, 346, 362, 363, 364, 366, 367, 380, 381, 382, 431, 437, 438, 439, 440, 442, 445, 446, 447, 448, 462, 467, 478, 479, 555, 622, 641, 663, 669, 678, 707], "org.apache.commons.codec.binary.Base64Test::testCodeInteger3": [298, 334, 339, 341, 346, 351, 353, 355, 356, 357, 380, 381, 382, 388, 389, 390, 391, 392, 622, 641, 663, 669, 678, 722, 739, 750, 752, 753, 755, 756], "org.apache.commons.codec.binary.Base64Test::testSingletonsChunked": [194, 275, 280, 285, 287, 298, 334, 339, 341, 345, 346, 351, 353, 355, 356, 357, 373, 375, 377, 380, 381, 382, 607, 622, 641, 663, 669, 678], "org.apache.commons.codec.binary.Base64Test::testSingletons": [175, 217, 244, 275, 298, 334, 339, 341, 346, 351, 353, 355, 356, 357, 380, 381, 382, 431, 437, 438, 439, 440, 442, 445, 446, 447, 448, 462, 467, 474, 555, 622, 641, 663, 669, 678, 707], "org.apache.commons.codec.binary.Base64Test::testKnownDecodings": [175, 217, 244, 275, 431, 437, 438, 439, 440, 442, 445, 446, 447, 448, 450, 451, 452, 453, 462, 467, 474, 478, 479, 707], "org.apache.commons.codec.binary.Base64Test::testConstructor_Int_ByteArray_Boolean_UrlSafe": [275, 280, 285, 287, 334, 339, 341, 345, 346, 362, 363, 364, 373, 375, 377, 380, 381, 382, 388, 389, 390, 391, 392, 393, 394, 396, 397], "org.apache.commons.codec.binary.Base64Test::testRfc4648Section10DecodeWithCrLf": [175, 217, 244, 275, 431, 437, 438, 439, 440, 442, 445, 446, 447, 448, 450, 451, 452, 453, 462, 467, 474, 478, 479, 693], "org.apache.commons.codec.binary.Base64Test::testObjectDecodeWithValidParameter": [175, 217, 244, 275, 334, 339, 380, 381, 382, 388, 389, 390, 391, 392, 431, 437, 438, 439, 440, 445, 446, 447, 448, 450, 451, 452, 453, 555, 622, 641, 663, 678], "org.apache.commons.codec.binary.Base64Test::testCodeIntegerNull": [736, 737], "org.apache.commons.codec.binary.Base64Test::testCodeInteger4": [298, 334, 339, 341, 346, 362, 363, 364, 366, 367, 380, 381, 382, 388, 389, 390, 391, 392, 622, 641, 663, 669, 678, 722, 739, 750, 752, 753, 755, 756], "org.apache.commons.codec.binary.Base64Test::testDecodeWithWhitespace": [175, 217, 244, 275, 431, 437, 438, 439, 440, 445, 446, 447, 448, 450, 451, 452, 453, 707], "org.apache.commons.codec.binary.Base64Test::testChunkedEncodeMultipleOf76": [194, 275, 280, 285, 287, 298, 334, 339, 341, 345, 346, 362, 363, 364, 366, 367, 373, 375, 377, 380, 381, 382, 388, 389, 390, 391, 392, 393, 394, 396, 397, 622, 641, 663, 669, 678], "org.apache.commons.codec.binary.Base64Test::testRfc4648Section10Decode": [175, 217, 244, 275, 431, 437, 438, 439, 440, 442, 445, 446, 447, 448, 450, 451, 452, 453, 462, 467, 474, 478, 479, 693], "org.apache.commons.codec.binary.Base64Test::testDecodePadOnly": [431, 437, 438, 707], "org.apache.commons.codec.binary.Base64Test::testObjectEncode": [175, 217, 244, 298, 334, 339, 341, 346, 362, 363, 364, 366, 367, 380, 381, 382, 388, 389, 390, 391, 392], "org.apache.commons.codec.binary.Base64Test::testBase64": [244, 275, 298, 334, 339, 341, 346, 362, 363, 364, 366, 367, 380, 381, 382, 388, 389, 390, 391, 392, 431, 437, 438, 439, 440, 442, 445, 446, 447, 448, 450, 451, 452, 453, 462, 467, 478, 479, 555, 622, 641, 663, 669, 678], "org.apache.commons.codec.binary.Base64Test::testUrlSafe": [175, 217, 244, 275, 334, 339, 341, 346, 351, 353, 362, 363, 364, 380, 381, 382, 388, 389, 390, 391, 392, 431, 434, 435, 437, 438, 439, 440, 445, 446, 447, 448, 450, 451, 452, 453, 462, 467, 474, 478, 479, 583, 641, 663, 664, 678, 707], "org.apache.commons.codec.binary.Base64OutputStreamTest::testCodec98NPE": [194, 275, 431, 434, 435, 437, 438, 439, 440, 445, 446, 447, 448, 450, 451, 452, 453, 462, 463, 467, 478, 479], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipBig": [194, 275, 431, 434, 435, 437, 438, 439, 440, 445, 446, 447, 448, 450, 451, 452, 453], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipNone": [194, 275, 431, 434, 435, 437, 438, 439, 440, 445, 446, 447, 448, 450, 451, 452, 453], "org.apache.commons.codec.binary.Base64InputStreamTest::testInputStreamReader": [194, 275, 431, 434, 435, 437, 438, 439, 440, 445, 446, 447, 448, 462, 463, 467, 478, 479], "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec98NPE": [194, 275, 431, 434, 435, 437, 438, 439, 440, 445, 446, 447, 448, 450, 451, 452, 453, 462, 463, 467, 478, 479], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipToEnd": [194, 275, 431, 434, 435, 437, 438, 439, 440, 445, 446, 447, 448, 450, 451, 452, 453], "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipPastEnd": [194, 275, 431, 434, 435, 437, 438, 439, 440, 445, 446, 447, 448, 450, 451, 452, 453], "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec130": [194, 275, 280, 285, 287, 298, 334, 339, 341, 344, 345, 346, 362, 363, 364, 366, 367, 373, 375, 377, 380, 381, 382, 388, 389, 390, 391, 392, 393, 431, 437, 438, 439, 440, 442, 445, 446, 447, 448, 450, 451, 452, 453, 462, 467, 478, 479], "org.apache.commons.codec.binary.Base64InputStreamTest::testAvailable": [194, 275, 431, 434, 435, 437, 438, 439, 440, 445, 446, 447, 448, 450, 451, 452, 453], "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec101": [194, 275, 431, 434, 435, 437, 438, 439, 440, 445, 446, 447, 448, 462, 463, 467, 478, 479]}, "org.apache.commons.codec.binary.Base32InputStream": {"org.apache.commons.codec.binary.Base32InputStreamTest::testSkipToEnd": [48, 61], "org.apache.commons.codec.binary.Base32InputStreamTest::testAvailable": [48, 61], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipPastEnd": [48, 61], "org.apache.commons.codec.binary.Base32InputStreamTest::testCodec130": [48, 61], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipNone": [48, 61], "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipBig": [48, 61]}}