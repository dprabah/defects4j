{"org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer": {"org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testTrivial": [159, 185, 190, 191, 192, 193, 194, 212, 217, 219, 220, 221, 222, 225, 240, 250, 251, 252, 253, 255, 338, 339, 340, 341, 342, 343, 346, 347, 352], "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testCircleFitting": [159, 185, 190, 191, 192, 193, 194, 212, 217, 219, 220, 221, 222, 225, 250, 251, 252, 253, 255, 273, 274, 275, 277, 287, 289, 307, 312, 313, 314, 315, 316, 318, 338, 339, 340, 341, 342, 343, 346, 347, 352], "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testInconsistentSizes": [327, 328], "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testIllConditioned": [159, 185, 190, 191, 192, 193, 194, 212, 217, 219, 220, 221, 222, 225, 240, 250, 251, 252, 253, 255, 338, 339, 340, 341, 342, 343, 346, 347, 352], "org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest::testTwoSets": [159, 212, 338, 342, 346, 347, 352], "org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest::testColumnsPermutation": [159, 212, 338, 342, 346, 347, 352], "org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest::testIllConditioned": [159, 212, 338, 342, 346, 347, 352], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testNoError": [159, 185, 190, 191, 192, 193, 194, 212, 217, 219, 220, 221, 222, 225, 338, 339, 340, 341, 342, 343, 346, 347, 352], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::test1PercentError": [159, 185, 190, 191, 192, 193, 194, 212, 217, 219, 220, 221, 222, 225, 338, 339, 340, 341, 342, 343, 346, 347, 352], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testInitialGuess": [159, 185, 190, 191, 192, 193, 194, 212, 217, 219, 220, 221, 222, 225, 338, 339, 340, 341, 342, 343, 346, 347, 352], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testUnsorted": [159, 185, 190, 191, 192, 193, 194, 212, 217, 219, 220, 221, 222, 225, 338, 339, 340, 341, 342, 343, 346, 347, 352], "org.apache.commons.math.optimization.fitting.CurveFitterTest::testMath303": [159, 185, 190, 191, 192, 193, 194, 212, 217, 219, 220, 221, 222, 225, 338, 339, 340, 341, 342, 343, 346, 347, 352], "org.apache.commons.math.optimization.fitting.CurveFitterTest::testMath372": [159, 185, 190, 191, 192, 193, 194, 212, 217, 219, 220, 221, 222, 225, 240, 250, 251, 252, 253, 255, 338, 339, 340, 341, 342, 343, 346, 347, 352], "org.apache.commons.math.optimization.fitting.CurveFitterTest::testMath304": [159, 185, 190, 191, 192, 193, 194, 212, 217, 219, 220, 221, 222, 225, 338, 339, 340, 341, 342, 343, 346, 347, 352], "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest::testTrivial": [134, 149, 154, 159, 173, 184, 208, 212, 333, 334, 335, 338, 342, 346, 347, 352]}, "org.apache.commons.math.linear.Array2DRowRealMatrix": {"org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testCircleFitting": [78, 96, 116, 122, 132, 138, 298, 316, 331, 336, 401, 407, 597, 598, 600, 603, 617]}, "org.apache.commons.math.optimization.fitting.HarmonicFitter": {"org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testNoError": [47, 48, 71, 83, 92, 100, 101], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::test1PercentError": [47, 48, 71, 83, 92, 100, 101], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testInitialGuess": [60, 61, 71, 100, 101], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testUnsorted": [47, 48, 71, 83, 92, 100, 101]}, "org.apache.commons.math.optimization.fitting.HarmonicFunction": {"org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testNoError": [43, 44, 45, 50, 62, 69, 76], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::test1PercentError": [43, 44, 45, 50, 62, 69, 76], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testInitialGuess": [43, 44, 45, 50, 62, 69, 76], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testUnsorted": [43, 44, 45, 50, 62, 69, 76]}, "org.apache.commons.math.linear.LUDecompositionImpl": {"org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testCircleFitting": [68, 85, 87, 227]}, "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer": {"org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest::testTrivial": [85, 89, 90, 127, 142, 157, 162, 167, 181, 182, 183, 184, 187, 192, 200, 201, 202, 234]}, "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer": {"org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testTrivial": [172, 173, 174, 175, 176, 177, 191, 201, 212, 223, 236, 245, 246, 247, 248, 249, 250, 255, 256, 257, 258, 263, 267, 275, 276, 279, 283, 284, 285, 288, 292, 293, 294, 298, 299, 300, 302, 305, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 324, 326, 330, 331, 335, 338, 339, 340, 342, 343, 344, 345, 348, 351, 352, 353, 354, 355, 356, 357, 359, 367, 368, 372, 373, 374, 379, 380, 381, 382, 383, 384, 387, 388, 389, 391, 392, 393, 394, 398, 401, 409, 410, 415, 417, 418, 419, 420, 421, 423, 437, 444, 498, 499, 501, 504, 505, 506, 507, 510, 515, 516, 517, 518, 520, 522, 523, 524, 525, 791, 792, 793, 794, 795, 796, 798, 802, 806, 807, 808, 809, 810, 811, 817, 818, 819, 822, 826, 828, 831, 832, 833, 834, 837, 838, 841, 854, 864, 865, 866, 867, 868, 870, 871, 872], "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testCircleFitting": [172, 173, 174, 175, 176, 177, 191, 201, 212, 223, 236, 245, 246, 247, 248, 249, 250, 255, 256, 257, 258, 263, 267, 275, 276, 279, 283, 284, 285, 288, 292, 293, 294, 298, 299, 300, 302, 305, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 324, 330, 331, 335, 338, 339, 340, 342, 343, 344, 345, 348, 351, 352, 353, 354, 355, 356, 357, 359, 367, 368, 372, 373, 374, 379, 380, 381, 382, 383, 384, 387, 388, 389, 391, 392, 393, 394, 398, 401, 409, 410, 415, 417, 418, 419, 420, 421, 423, 437, 444, 448, 498, 499, 501, 504, 505, 506, 507, 508, 510, 515, 516, 517, 518, 520, 522, 523, 524, 525, 791, 792, 793, 794, 795, 796, 798, 802, 806, 807, 808, 809, 810, 811, 817, 818, 819, 822, 826, 827, 828, 831, 832, 833, 834, 837, 838, 841, 842, 843, 844, 846, 847, 848, 854, 864, 865, 866, 867, 868, 870, 871, 872], "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testIllConditioned": [172, 173, 174, 175, 176, 177, 191, 201, 212, 223, 236, 245, 246, 247, 248, 249, 250, 255, 256, 257, 258, 263, 267, 275, 276, 279, 283, 284, 285, 288, 292, 293, 294, 298, 299, 300, 302, 305, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 324, 330, 331, 335, 338, 339, 340, 342, 343, 344, 345, 348, 351, 352, 353, 354, 355, 356, 357, 359, 367, 368, 372, 373, 374, 379, 380, 381, 382, 383, 384, 387, 388, 389, 391, 392, 393, 394, 395, 398, 401, 402, 407, 409, 410, 415, 417, 418, 419, 420, 421, 423, 427, 432, 437, 444, 448, 498, 499, 501, 504, 505, 506, 507, 508, 510, 515, 516, 517, 518, 520, 522, 523, 524, 525, 791, 792, 793, 794, 795, 796, 798, 802, 806, 807, 808, 809, 810, 811, 817, 818, 819, 822, 826, 827, 828, 831, 832, 833, 834, 837, 838, 841, 842, 843, 844, 846, 847, 848, 854, 864, 865, 866, 867, 868, 870, 871, 872], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testNoError": [172, 173, 174, 175, 176, 177, 191, 201, 212, 223, 236, 245, 246, 247, 248, 249, 250, 255, 256, 257, 258, 263, 267, 275, 276, 279, 283, 284, 285, 288, 292, 293, 294, 298, 299, 300, 302, 305, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 324, 330, 331, 335, 338, 339, 340, 342, 343, 344, 345, 348, 351, 352, 353, 354, 355, 356, 357, 359, 367, 368, 372, 373, 374, 379, 380, 381, 382, 383, 384, 387, 388, 389, 391, 392, 393, 394, 398, 401, 409, 410, 415, 417, 418, 419, 420, 421, 423, 437, 444, 448, 498, 499, 501, 504, 505, 506, 507, 508, 510, 515, 516, 517, 518, 520, 522, 523, 524, 525, 791, 792, 793, 794, 795, 796, 798, 802, 806, 807, 808, 809, 810, 811, 817, 818, 819, 822, 826, 827, 828, 831, 832, 833, 834, 837, 838, 841, 842, 843, 844, 846, 847, 848, 854, 864, 865, 866, 867, 868, 870, 871, 872], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::test1PercentError": [172, 173, 174, 175, 176, 177, 191, 201, 212, 223, 236, 245, 246, 247, 248, 249, 250, 255, 256, 257, 258, 263, 267, 275, 276, 279, 283, 284, 285, 288, 292, 293, 294, 298, 299, 300, 302, 305, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 324, 330, 331, 335, 338, 339, 340, 342, 343, 344, 345, 348, 351, 352, 353, 354, 355, 356, 357, 359, 367, 368, 372, 373, 374, 379, 380, 381, 382, 383, 384, 387, 388, 389, 391, 392, 393, 394, 398, 401, 409, 410, 415, 417, 418, 419, 420, 421, 423, 437, 444, 448, 498, 499, 501, 504, 505, 506, 507, 508, 510, 515, 516, 517, 518, 520, 522, 523, 524, 525, 791, 792, 793, 794, 795, 796, 798, 802, 806, 807, 808, 809, 810, 811, 817, 818, 819, 822, 826, 827, 828, 831, 832, 833, 834, 837, 838, 841, 842, 843, 844, 846, 847, 848, 854, 864, 865, 866, 867, 868, 870, 871, 872], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testInitialGuess": [172, 173, 174, 175, 176, 177, 191, 201, 212, 223, 236, 245, 246, 247, 248, 249, 250, 255, 256, 257, 258, 259, 260, 263, 267, 275, 276, 279, 283, 284, 285, 288, 292, 293, 294, 298, 299, 300, 302, 305, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 324, 330, 331, 335, 338, 339, 340, 342, 343, 344, 345, 348, 351, 352, 353, 354, 355, 356, 357, 359, 367, 368, 372, 373, 374, 379, 380, 381, 382, 383, 384, 387, 388, 389, 391, 392, 393, 394, 395, 398, 401, 402, 407, 408, 409, 410, 411, 415, 417, 418, 419, 420, 421, 423, 426, 427, 428, 429, 431, 432, 433, 437, 444, 448, 498, 499, 501, 504, 505, 506, 507, 508, 510, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 546, 547, 548, 550, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 573, 578, 584, 585, 586, 587, 589, 591, 592, 593, 594, 595, 596, 598, 600, 604, 610, 611, 612, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 627, 630, 631, 637, 667, 668, 669, 670, 672, 673, 677, 681, 682, 686, 691, 692, 693, 697, 701, 702, 703, 704, 705, 707, 708, 709, 714, 715, 716, 717, 720, 721, 722, 723, 724, 732, 733, 739, 740, 748, 749, 750, 751, 752, 753, 755, 760, 761, 791, 792, 793, 794, 795, 796, 798, 802, 806, 807, 808, 809, 810, 811, 817, 818, 819, 822, 826, 827, 828, 831, 832, 833, 834, 837, 838, 841, 842, 843, 844, 846, 847, 848, 854, 864, 865, 866, 867, 868, 870, 871, 872], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testUnsorted": [172, 173, 174, 175, 176, 177, 191, 201, 212, 223, 236, 245, 246, 247, 248, 249, 250, 255, 256, 257, 258, 263, 267, 275, 276, 279, 283, 284, 285, 288, 292, 293, 294, 298, 299, 300, 302, 305, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 324, 330, 331, 335, 338, 339, 340, 342, 343, 344, 345, 348, 351, 352, 353, 354, 355, 356, 357, 359, 367, 368, 372, 373, 374, 379, 380, 381, 382, 383, 384, 387, 388, 389, 391, 392, 393, 394, 398, 401, 409, 410, 415, 417, 418, 419, 420, 421, 423, 437, 444, 448, 498, 499, 501, 504, 505, 506, 507, 508, 510, 515, 516, 517, 518, 520, 522, 523, 524, 525, 791, 792, 793, 794, 795, 796, 798, 802, 806, 807, 808, 809, 810, 811, 817, 818, 819, 822, 826, 827, 828, 831, 832, 833, 834, 837, 838, 841, 842, 843, 844, 846, 847, 848, 854, 864, 865, 866, 867, 868, 870, 871, 872], "org.apache.commons.math.optimization.fitting.CurveFitterTest::testMath303": [172, 173, 174, 175, 176, 177, 191, 201, 212, 223, 236, 245, 246, 247, 248, 249, 250, 255, 256, 257, 258, 263, 267, 275, 276, 279, 283, 284, 285, 288, 292, 293, 294, 298, 299, 300, 302, 305, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 324, 326, 330, 331, 335, 338, 339, 340, 342, 343, 344, 345, 348, 351, 352, 353, 354, 355, 356, 357, 359, 367, 368, 372, 373, 374, 379, 380, 381, 382, 383, 384, 387, 388, 389, 391, 392, 393, 394, 398, 401, 409, 410, 415, 417, 418, 419, 420, 421, 423, 437, 444, 498, 499, 501, 504, 505, 506, 507, 508, 510, 515, 516, 517, 518, 520, 522, 523, 524, 525, 791, 792, 793, 794, 795, 796, 798, 802, 806, 807, 808, 809, 810, 811, 817, 818, 819, 822, 826, 827, 828, 831, 832, 833, 834, 837, 838, 841, 842, 843, 844, 846, 847, 848, 854, 864, 865, 866, 867, 868, 870, 871, 872], "org.apache.commons.math.optimization.fitting.CurveFitterTest::testMath372": [172, 173, 174, 175, 176, 177, 191, 201, 212, 223, 236, 245, 246, 247, 248, 249, 250, 255, 256, 257, 258, 259, 260, 263, 267, 275, 276, 279, 283, 284, 285, 288, 292, 293, 294, 298, 299, 300, 302, 305, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 324, 330, 331, 335, 338, 339, 340, 342, 343, 344, 345, 348, 351, 352, 353, 354, 355, 356, 357, 359, 367, 368, 372, 373, 374, 379, 380, 381, 382, 383, 384, 387, 388, 389, 391, 392, 393, 394, 395, 398, 401, 402, 407, 408, 409, 410, 415, 417, 418, 419, 420, 421, 423, 426, 427, 428, 429, 431, 432, 433, 437, 444, 448, 498, 499, 501, 504, 505, 506, 507, 508, 510, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 546, 547, 548, 550, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 573, 578, 584, 585, 586, 587, 589, 667, 668, 669, 670, 672, 673, 677, 681, 682, 686, 691, 692, 693, 697, 701, 702, 707, 708, 709, 714, 715, 716, 717, 720, 721, 722, 723, 724, 732, 733, 739, 740, 748, 749, 750, 751, 752, 753, 755, 760, 761, 791, 792, 793, 794, 795, 796, 798, 802, 806, 807, 808, 809, 810, 811, 817, 818, 819, 822, 826, 827, 828, 831, 832, 833, 834, 837, 838, 841, 842, 843, 844, 846, 847, 848, 854, 864, 865, 866, 867, 868, 870, 871, 872], "org.apache.commons.math.optimization.fitting.CurveFitterTest::testMath304": [172, 173, 174, 175, 176, 177, 191, 201, 212, 223, 236, 245, 246, 247, 248, 249, 250, 255, 256, 257, 258, 263, 267, 275, 276, 279, 283, 284, 285, 288, 292, 293, 294, 298, 299, 300, 302, 305, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 324, 326, 330, 331, 335, 338, 339, 340, 342, 343, 344, 345, 348, 351, 352, 353, 354, 355, 356, 357, 359, 367, 368, 372, 373, 374, 379, 380, 381, 382, 383, 384, 387, 388, 389, 391, 392, 393, 394, 398, 401, 409, 410, 415, 417, 418, 419, 420, 421, 423, 437, 444, 498, 499, 501, 504, 505, 506, 507, 510, 515, 516, 517, 518, 520, 522, 523, 524, 525, 791, 792, 793, 794, 795, 796, 798, 802, 806, 807, 808, 809, 810, 811, 817, 818, 819, 822, 826, 828, 831, 832, 833, 834, 837, 838, 841, 854, 864, 865, 866, 867, 868, 870, 871, 872]}, "org.apache.commons.math.linear.BlockRealMatrix": {"org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testTrivial": [127, 150, 151, 154, 155, 157, 162, 207, 208, 209, 210, 213, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 240, 250, 636, 639, 640, 641, 644, 648, 658, 1346, 1352, 1365, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1387, 1388, 1390, 1395], "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testIllConditioned": [127, 150, 151, 154, 155, 157, 162, 207, 208, 209, 210, 213, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 240, 250, 636, 639, 640, 641, 644, 648, 658, 1346, 1352, 1365, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1384, 1385, 1387, 1390, 1395], "org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest::testTwoSets": [127, 150, 151, 154, 155, 1365, 1368, 1369, 1370, 1371, 1373, 1374, 1376, 1378, 1379, 1385, 1387, 1388, 1395], "org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest::testColumnsPermutation": [127, 150, 151, 154, 155, 1365, 1368, 1369, 1370, 1371, 1373, 1374, 1376, 1378, 1379, 1387, 1388, 1395], "org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest::testIllConditioned": [127, 150, 151, 154, 155, 1365, 1368, 1369, 1370, 1371, 1373, 1374, 1376, 1378, 1379, 1385, 1387, 1395], "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest::testTrivial": [127, 150, 151, 154, 155, 1365, 1368, 1369, 1370, 1371, 1373, 1374, 1376, 1378, 1379, 1387, 1388, 1395]}, "org.apache.commons.math.util.MathUtils": {"org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testNoError": [1208], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::test1PercentError": [1208], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testInitialGuess": [1208], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testUnsorted": [1208]}, "org.apache.commons.math.optimization.VectorialPointValuePair": {"org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testTrivial": [48, 88], "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testCircleFitting": [47, 81], "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testIllConditioned": [47, 72], "org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest::testTwoSets": [47, 48, 72, 97], "org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest::testColumnsPermutation": [48, 88, 97], "org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest::testIllConditioned": [48, 97], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testNoError": [47, 81], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::test1PercentError": [47, 81], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testInitialGuess": [47, 81], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testUnsorted": [47, 81], "org.apache.commons.math.optimization.fitting.CurveFitterTest::testMath303": [47, 81], "org.apache.commons.math.optimization.fitting.CurveFitterTest::testMath372": [47, 81], "org.apache.commons.math.optimization.fitting.CurveFitterTest::testMath304": [47, 81], "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest::testTrivial": [48, 88, 97]}, "org.apache.commons.math.optimization.fitting.CurveFitter": {"org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testNoError": [43, 55, 56, 83, 131, 132, 134, 141, 145], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::test1PercentError": [43, 55, 56, 83, 131, 132, 134, 141, 145], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testInitialGuess": [43, 55, 56, 83, 131, 132, 134, 141, 145], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testUnsorted": [43, 55, 56, 83, 131, 132, 134, 141, 145], "org.apache.commons.math.optimization.fitting.CurveFitterTest::testMath303": [43, 55, 56, 70, 83, 131, 132, 134, 141, 145], "org.apache.commons.math.optimization.fitting.CurveFitterTest::testMath372": [43, 55, 56, 70, 83, 131, 132, 134, 141, 145], "org.apache.commons.math.optimization.fitting.CurveFitterTest::testMath304": [43, 55, 56, 70, 83, 131, 132, 134, 141, 145]}, "org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator": {"org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest::testPreconditions": [35, 84, 85, 87, 88, 89]}, "org.apache.commons.math.linear.MatrixUtils": {"org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testCircleFitting": [62, 107, 143, 144, 147]}, "org.apache.commons.math.random.UncorrelatedRandomVectorGenerator": {"org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest::testTrivial": [73, 84, 85, 89]}, "org.apache.commons.math.optimization.general.GaussNewtonOptimizer": {"org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest::testTwoSets": [69, 74, 75, 77, 82, 90, 95, 98, 115, 124, 125, 131], "org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest::testColumnsPermutation": [69, 74, 75, 77, 82, 90, 95, 98, 115, 124, 125, 131], "org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest::testIllConditioned": [69, 74, 75, 77, 82, 90, 95, 98, 115, 124, 125, 131], "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest::testTrivial": [69, 71, 74, 75, 76, 77, 82, 90, 95, 98, 115, 124, 125]}, "org.apache.commons.math.optimization.fitting.WeightedObservedPoint": {"org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testNoError": [49, 64], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::test1PercentError": [49, 64], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testInitialGuess": [49, 64], "org.apache.commons.math.optimization.fitting.HarmonicFitterTest::testUnsorted": [49, 64], "org.apache.commons.math.optimization.fitting.CurveFitterTest::testMath303": [49, 64], "org.apache.commons.math.optimization.fitting.CurveFitterTest::testMath372": [49, 64], "org.apache.commons.math.optimization.fitting.CurveFitterTest::testMath304": [49, 64]}, "org.apache.commons.math.optimization.SimpleVectorialValueChecker": {"org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest::testTwoSets": [66, 67, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86], "org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest::testColumnsPermutation": [66, 67, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86], "org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest::testIllConditioned": [66, 67, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86], "org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest::testTrivial": [66, 67, 74, 75, 76, 77, 78, 79, 80, 81, 83]}}