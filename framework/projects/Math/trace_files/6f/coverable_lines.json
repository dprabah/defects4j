{"org.apache.commons.math3.optim.BaseOptimizer": {"statement_coverable_lines": [47, 48, 50, 51, 52, 60, 72, 81, 93, 102, 137, 140, 141, 143, 162, 163, 173, 174, 190, 191, 192, 193, 195, 196, 197, 200], "checked_coverable_lines": [47, 48, 50, 51, 60, 72, 81, 93, 102, 137, 140, 141, 143, 162, 173, 190, 191, 192, 193, 195, 196, 197]}, "org.apache.commons.math3.optim.BaseOptimizer$1": {"statement_coverable_lines": [], "checked_coverable_lines": []}, "org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback": {"statement_coverable_lines": [206, 213], "checked_coverable_lines": []}, "org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback": {"statement_coverable_lines": [221, 228], "checked_coverable_lines": []}, "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer": {"statement_coverable_lines": [49, 58, 71, 75, 144, 148, 162, 164, 165, 166, 167, 168, 187, 193, 194, 195, 196, 197, 198, 199, 200, 205, 206, 208, 209, 210, 213, 214, 216, 218, 219, 220, 221, 222, 224, 229, 230, 234, 235, 238, 239, 242, 243, 244, 245, 250, 251, 252, 253, 254, 258, 260, 261, 263, 264, 265, 267, 268, 271, 273, 276, 279, 282, 283, 286, 302, 306, 307, 308, 311, 315, 316, 329, 330, 331, 332, 333, 334, 335, 338, 401, 403, 405], "checked_coverable_lines": [49, 58, 71, 144, 162, 164, 165, 166, 167, 187, 193, 194, 195, 196, 197, 198, 199, 200, 205, 206, 208, 209, 210, 213, 214, 216, 218, 219, 220, 221, 222, 224, 229, 230, 234, 235, 238, 239, 242, 243, 244, 245, 250, 251, 252, 253, 254, 258, 260, 261, 263, 264, 265, 267, 268, 271, 273, 276, 279, 282, 283, 302, 306, 307, 308, 311, 315, 329, 330, 331, 332, 333, 334, 335, 338, 401, 403]}, "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$1": {"statement_coverable_lines": [258], "checked_coverable_lines": []}, "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$BracketingStep": {"statement_coverable_lines": [118, 119, 120, 128], "checked_coverable_lines": []}, "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula": {"statement_coverable_lines": [95, 97, 99], "checked_coverable_lines": []}, "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner": {"statement_coverable_lines": [342, 345], "checked_coverable_lines": []}, "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$LineSearchFunction": {"statement_coverable_lines": [370, 371, 372, 373, 378, 379, 380, 384, 387, 388, 389, 392], "checked_coverable_lines": []}, "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer": {"statement_coverable_lines": [79, 119, 200, 202, 204, 206, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 252, 259, 266, 363, 370, 371, 372, 374, 375, 376, 377, 378, 379, 382, 387, 388, 391, 392, 393, 395, 396, 397, 398, 399, 402, 405, 407, 410, 412, 414, 415, 416, 417, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 434, 435, 436, 437, 438, 439, 440, 442, 444, 445, 451, 452, 453, 456, 457, 458, 459, 460, 462, 463, 466, 467, 468, 471, 472, 473, 476, 478, 480, 483, 484, 487, 488, 491, 493, 495, 498, 499, 501, 503, 506, 507, 508, 509, 510, 511, 512, 515, 531, 535, 536, 537, 538, 540, 541, 542, 546, 547, 553, 554, 555, 557, 558, 559, 561, 562, 563, 567, 575, 576, 579, 580, 581, 583, 584, 587, 588, 589, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 607, 609, 610, 614, 615, 617, 618, 619, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 638, 649, 652, 653, 656, 657, 658, 660, 673, 674, 675, 679, 680, 683, 684, 685, 686, 688, 704, 705, 706, 708, 711, 712, 713, 715, 719, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 736, 737, 739, 740, 741, 742, 743, 750, 752, 759, 760, 768, 771, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 785, 787, 788, 789, 790, 792, 793, 794, 796, 805, 806, 808, 809, 818, 819, 820, 822, 823, 824, 825, 827, 983, 984, 985, 986, 989, 997, 998, 999, 1000, 1003, 1011, 1012, 1013, 1014, 1015, 1018, 1027, 1028, 1029, 1030, 1033, 1042, 1043, 1044, 1045, 1048, 1057, 1058, 1059, 1060, 1063, 1072, 1073, 1074, 1075, 1078, 1086, 1087, 1088, 1089, 1090, 1092, 1094, 1103, 1104, 1105, 1106, 1108, 1110, 1111, 1112, 1114, 1128, 1129, 1131, 1139, 1140, 1141, 1143, 1153, 1154, 1155, 1156, 1159, 1168, 1178, 1179, 1180, 1181, 1182, 1183, 1186, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1211, 1212, 1213, 1214, 1215, 1216, 1220, 1228, 1229, 1230, 1231, 1232, 1233, 1237, 1245, 1246, 1247, 1248, 1251, 1259, 1260, 1261, 1262, 1265, 1273, 1274, 1275, 1277, 1285, 1286, 1287, 1289, 1297, 1298, 1299, 1301, 1310, 1311, 1312, 1313, 1316], "checked_coverable_lines": [79, 119, 200, 202, 204, 206, 231, 232, 233, 234, 235, 236, 237, 238, 245, 252, 259, 266, 363, 370, 371, 372, 374, 375, 376, 377, 378, 379, 382, 387, 388, 391, 392, 393, 395, 396, 397, 398, 399, 402, 405, 407, 410, 412, 414, 415, 416, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 434, 435, 436, 437, 438, 439, 440, 442, 444, 445, 451, 452, 453, 456, 457, 458, 459, 460, 462, 463, 466, 467, 468, 471, 472, 473, 476, 478, 480, 483, 484, 487, 488, 491, 493, 495, 498, 499, 501, 503, 506, 507, 508, 509, 510, 511, 512, 515, 531, 535, 536, 537, 538, 540, 541, 542, 546, 553, 554, 555, 557, 558, 559, 561, 562, 563, 575, 576, 579, 580, 581, 583, 584, 587, 588, 589, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 607, 609, 610, 614, 615, 617, 618, 619, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 649, 652, 653, 656, 657, 658, 660, 673, 674, 675, 679, 680, 683, 684, 685, 686, 704, 705, 706, 708, 711, 712, 713, 715, 719, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 736, 737, 739, 740, 741, 742, 743, 750, 752, 759, 768, 771, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 785, 787, 788, 789, 790, 792, 793, 794, 805, 806, 808, 818, 819, 820, 822, 823, 824, 825, 827, 983, 984, 985, 986, 989, 997, 998, 999, 1000, 1003, 1011, 1012, 1013, 1014, 1015, 1018, 1027, 1028, 1029, 1030, 1033, 1042, 1043, 1044, 1045, 1048, 1057, 1058, 1059, 1060, 1063, 1072, 1073, 1074, 1075, 1078, 1086, 1087, 1088, 1089, 1090, 1092, 1094, 1103, 1104, 1105, 1106, 1108, 1110, 1111, 1112, 1114, 1128, 1129, 1139, 1140, 1141, 1143, 1153, 1154, 1155, 1156, 1159, 1168, 1178, 1179, 1180, 1181, 1182, 1183, 1186, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1211, 1212, 1213, 1214, 1215, 1216, 1220, 1228, 1229, 1230, 1231, 1232, 1233, 1237, 1245, 1246, 1247, 1248, 1251, 1259, 1260, 1261, 1262, 1265, 1273, 1274, 1275, 1277, 1285, 1286, 1287, 1289, 1297, 1298, 1299, 1301, 1310, 1311, 1312, 1313, 1316]}, "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$DoubleIndex": {"statement_coverable_lines": [834, 844, 845, 846, 847, 851, 858, 859, 862, 863, 866, 872, 873], "checked_coverable_lines": []}, "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction": {"statement_coverable_lines": [882, 893, 894, 895, 896, 904, 905, 906, 908, 909, 911, 919, 920, 922, 923, 924, 926, 927, 930, 937, 938, 945, 946, 948, 949, 950, 951, 952, 953, 955, 958, 967, 968, 969, 970, 972], "checked_coverable_lines": []}, "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize": {"statement_coverable_lines": [327, 328, 329, 331, 332, 338], "checked_coverable_lines": []}, "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma": {"statement_coverable_lines": [290, 291, 292, 293, 297, 298, 304], "checked_coverable_lines": []}, "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer": {"statement_coverable_lines": [65, 70, 101, 102, 122, 124, 125, 127, 128, 130, 131, 134, 136, 151, 152, 168, 169, 174, 176, 177, 178, 180, 181, 182, 185, 188, 189, 190, 192, 194, 195, 196, 197, 198, 200, 201, 203, 205, 206, 207, 208, 209, 211, 212, 213, 218, 222, 223, 224, 225, 226, 229, 230, 231, 233, 237, 238, 239, 240, 241, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 262, 263, 266, 282, 283, 284, 285, 286, 287, 290, 291, 292, 294, 375, 377, 379], "checked_coverable_lines": [65, 70, 101, 122, 124, 125, 127, 128, 130, 131, 134, 151, 168, 174, 176, 177, 178, 180, 181, 182, 185, 188, 189, 190, 192, 194, 195, 196, 197, 198, 200, 201, 203, 205, 206, 207, 208, 209, 211, 212, 213, 218, 222, 223, 224, 225, 226, 229, 230, 231, 233, 237, 238, 239, 240, 241, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 262, 263, 282, 283, 284, 285, 286, 287, 290, 291, 292, 294, 375, 377]}, "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer$LineSearch": {"statement_coverable_lines": [317, 328, 329, 332, 344, 345, 356, 357, 361], "checked_coverable_lines": []}, "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer$LineSearch$1": {"statement_coverable_lines": [345, 347, 348, 349, 351, 352], "checked_coverable_lines": []}, "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer": {"statement_coverable_lines": [89, 97, 98, 105, 106, 122, 128, 132, 139, 140, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 165, 167, 172, 173, 175, 192, 196, 197, 198, 201, 204, 213, 214, 216, 218, 220], "checked_coverable_lines": [89, 97, 105, 122, 128, 132, 139, 140, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 165, 167, 172, 173, 175, 192, 196, 197, 198, 201, 213, 214, 216, 218]}, "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$1": {"statement_coverable_lines": [133, 135], "checked_coverable_lines": []}, "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2": {"statement_coverable_lines": [141, 144, 145, 146], "checked_coverable_lines": []}, "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer": {"statement_coverable_lines": [52, 63, 64, 74, 75, 76, 81, 83, 87, 88, 91, 92, 94, 96, 97, 98, 101, 102, 105, 106, 107, 110, 112, 113, 114, 115, 118, 119, 120, 122, 123, 124, 127, 128, 129, 133, 134, 135, 136, 137, 144, 145, 148, 150, 151, 153, 154, 155, 158, 159, 160, 161, 162, 165, 167, 175, 177, 179], "checked_coverable_lines": [52, 63, 74, 75, 81, 83, 87, 88, 91, 92, 94, 96, 97, 98, 101, 102, 105, 106, 107, 110, 112, 113, 114, 115, 118, 119, 120, 122, 123, 124, 127, 128, 129, 133, 134, 135, 136, 137, 144, 145, 148, 150, 151, 153, 154, 158, 159, 160, 161, 162, 167, 175, 177]}, "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer": {"statement_coverable_lines": [113, 162, 163, 181, 182, 212, 213, 214, 215, 216, 217, 218, 241, 244, 274, 275, 276, 277, 278, 279, 280, 285, 287, 288, 289, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 314, 315, 316, 317, 320, 321, 322, 324, 326, 329, 331, 332, 333, 337, 341, 342, 343, 346, 349, 350, 351, 352, 353, 355, 356, 357, 359, 362, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 380, 382, 383, 387, 388, 392, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 421, 422, 426, 427, 428, 429, 432, 433, 434, 435, 440, 441, 442, 443, 444, 445, 448, 449, 450, 452, 453, 454, 455, 456, 459, 462, 463, 465, 466, 468, 469, 470, 471, 472, 476, 478, 479, 480, 481, 482, 484, 487, 489, 490, 491, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 512, 516, 517, 522, 523, 525, 526, 528, 529, 532, 533, 560, 564, 565, 567, 568, 570, 571, 572, 573, 574, 576, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 612, 613, 614, 616, 620, 621, 622, 623, 624, 625, 627, 628, 630, 631, 632, 634, 639, 640, 641, 644, 647, 648, 650, 651, 652, 653, 655, 657, 658, 659, 660, 661, 662, 664, 665, 666, 670, 672, 676, 677, 678, 680, 681, 682, 683, 684, 685, 688, 689, 690, 691, 693, 696, 697, 698, 699, 703, 706, 733, 734, 735, 736, 738, 739, 743, 747, 748, 749, 750, 752, 757, 758, 759, 763, 767, 768, 769, 770, 771, 772, 773, 774, 775, 780, 781, 782, 783, 786, 787, 788, 789, 790, 797, 798, 803, 804, 805, 806, 808, 809, 812, 813, 814, 815, 816, 817, 819, 824, 825, 827, 856, 858, 859, 862, 863, 864, 865, 866, 867, 869, 873, 876, 877, 878, 879, 880, 881, 882, 884, 885, 888, 889, 890, 893, 894, 895, 897, 898, 899, 902, 903, 904, 905, 908, 909, 912, 913, 914, 915, 917, 918, 919, 923, 924, 932, 933, 935, 936, 937, 938, 939, 941, 942, 943, 946, 953, 955, 957], "checked_coverable_lines": [113, 162, 181, 212, 213, 214, 215, 216, 217, 241, 274, 275, 276, 277, 278, 279, 285, 287, 288, 289, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 314, 315, 316, 317, 320, 321, 322, 324, 326, 329, 331, 332, 333, 337, 341, 342, 343, 346, 349, 350, 351, 352, 353, 355, 356, 357, 359, 362, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 380, 382, 383, 387, 388, 392, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 421, 422, 426, 427, 428, 429, 432, 433, 434, 435, 440, 441, 442, 443, 444, 445, 448, 449, 450, 452, 453, 454, 455, 456, 459, 462, 463, 465, 466, 468, 469, 470, 471, 472, 476, 478, 479, 480, 481, 482, 484, 487, 489, 490, 491, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 512, 516, 517, 522, 523, 525, 526, 528, 529, 560, 564, 565, 567, 568, 570, 571, 572, 573, 574, 576, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 612, 613, 614, 616, 620, 621, 622, 623, 624, 625, 627, 628, 630, 631, 632, 634, 639, 640, 641, 644, 647, 648, 650, 651, 652, 653, 655, 657, 658, 659, 660, 661, 662, 664, 665, 666, 670, 672, 676, 677, 678, 680, 681, 682, 683, 684, 685, 688, 689, 690, 691, 693, 696, 697, 698, 699, 703, 733, 734, 735, 736, 738, 739, 743, 747, 748, 749, 750, 752, 757, 758, 759, 763, 767, 768, 769, 770, 771, 772, 773, 774, 775, 780, 781, 782, 783, 786, 787, 788, 789, 790, 797, 798, 803, 804, 805, 806, 808, 809, 812, 813, 814, 815, 816, 817, 819, 824, 825, 856, 858, 859, 862, 863, 864, 865, 866, 867, 869, 873, 876, 877, 878, 879, 880, 881, 882, 884, 885, 888, 889, 890, 893, 894, 895, 897, 898, 899, 902, 903, 904, 905, 908, 909, 912, 913, 914, 915, 917, 918, 919, 923, 932, 933, 935, 936, 937, 938, 939, 941, 942, 943, 953, 955]}}