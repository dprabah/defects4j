{"org.apache.commons.csv.CSVFormat": {"org.apache.commons.csv.CSVFormatTest::testWithQuoteChar": [306, 474, 818, 834], "org.apache.commons.csv.CSVParserTest::testGetOneLineCustomCollection": [401, 410, 419, 438, 448, 465, 474], "org.apache.commons.csv.CSVParserTest::testIgnoreEmptyLines": [401, 410, 419, 438, 448, 465, 474], "org.apache.commons.csv.CSVPrinterTest::testInvalidFormat": [243, 703, 704], "org.apache.commons.csv.CSVParserTest::testEmptyFile": [410, 438], "org.apache.commons.csv.CSVParserTest::testProvidedHeader": [305, 306, 308, 309, 310, 311, 313, 314, 401, 410, 419, 428, 438, 448, 465, 474, 574, 758], "org.apache.commons.csv.CSVFormatTest::testNullRecordSeparatorCsv106": [385, 388], "org.apache.commons.csv.CSVPrinterTest::testExcelPrinter1": [492], "org.apache.commons.csv.CSVPrinterTest::testPrinter6": [492], "org.apache.commons.csv.CSVFormatTest::testQuoteCharSameAsCommentStartThrowsException": [306, 308, 636, 637, 671, 689, 818, 834], "org.apache.commons.csv.CSVParserTest::testLineFeedEndings": [401, 410, 419, 438, 448, 465, 474], "org.apache.commons.csv.CSVParserTest::testMultipleIterators": [401, 410, 419, 438, 448, 465, 474], "org.apache.commons.csv.CSVFormatTest::testDuplicateHeaderElements": [314, 650, 651, 653, 654, 758], "org.apache.commons.csv.CSVFormatTest::testEscapeSameAsCommentStartThrowsExceptionForWrapperType": [308, 309, 641, 642, 689, 736], "org.apache.commons.csv.CSVPrinterTest::testPrinter4": [492], "org.apache.commons.csv.CSVPrinterTest::testPrintCustomNullValues": [492], "org.apache.commons.csv.CSVPrinterTest::testPrinter5": [492], "org.apache.commons.csv.CSVParserTest::testBackslashEscaping2": [267, 305, 306, 308, 309, 310, 311, 313, 401, 410, 419, 438, 448, 465, 474, 720, 736, 771, 872], "org.apache.commons.csv.CSVFormatTest::testWithDelimiter": [305, 410, 706], "org.apache.commons.csv.CSVPrinterTest::testPrintNullValues": [492], "org.apache.commons.csv.CSVParserTest::testGetLine": [305, 306, 308, 309, 310, 311, 313, 401, 410, 419, 438, 448, 465, 474, 784], "org.apache.commons.csv.CSVPrinterTest::testExcelPrintAllArrayOfLists": [492], "org.apache.commons.csv.CSVFormatTest::testWithIgnoreEmptyLines": [311, 438, 771], "org.apache.commons.csv.CSVFormatTest::testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType": [306, 308, 636, 637, 671, 689, 834], "org.apache.commons.csv.CSVParserTest::testMappedButNotSetAsOutlook2007ContactExport": [305, 306, 308, 309, 310, 311, 313, 314, 315, 401, 410, 419, 428, 438, 448, 465, 474, 501, 574, 758, 886], "org.apache.commons.csv.CSVParserTest::testGetOneLineOneParser": [401, 410, 419, 438, 448, 465, 474, 492], "org.apache.commons.csv.CSVParserTest::testGetOneLine": [401, 410, 419, 438, 448, 465, 474], "org.apache.commons.csv.CSVParserTest::testClose": [305, 306, 308, 309, 310, 311, 313, 314, 401, 410, 419, 428, 438, 448, 465, 474, 574, 671, 689, 758], "org.apache.commons.csv.CSVPrinterTest::testPrinter2": [492], "org.apache.commons.csv.CSVFormatTest::testGetHeader": [314, 428, 758], "org.apache.commons.csv.CSVFormatTest::testEscapeSameAsCommentStartThrowsException": [308, 309, 641, 642, 671, 689, 720, 736], "org.apache.commons.csv.CSVFormatTest::testWithRecordSeparator": [312, 492, 860, 872], "org.apache.commons.csv.CSVParserTest::testRoundtrip": [401, 410, 419, 438, 448, 465, 474], "org.apache.commons.csv.CSVFormatTest::testDelimiterSameAsEscapeThrowsException": [305, 309, 626, 627, 706, 720, 736], "org.apache.commons.csv.CSVFormatTest::testWithIgnoreSurround": [310, 448, 784], "org.apache.commons.csv.CSVParserTest::testCSV57": [410, 438], "org.apache.commons.csv.CSVParserTest::testDuplicateHeaderEntries": [305, 306, 308, 309, 310, 311, 313, 314, 401, 410, 419, 428, 438, 448, 465, 474, 758], "org.apache.commons.csv.CSVParserTest::testCarriageReturnEndings": [401, 410, 419, 438, 448, 465, 474], "org.apache.commons.csv.CSVPrinterTest::testQuoteAll": [492], "org.apache.commons.csv.CSVPrinterTest::testPrinter1": [492], "org.apache.commons.csv.CSVFormatTest::testWithEscapeCRThrowsExceptions": [243, 255, 720, 733, 734], "org.apache.commons.csv.CSVParserTest::testExcelFormat2": [401, 410, 419, 438, 448, 465, 474], "org.apache.commons.csv.CSVFormatTest::testEquals": [305, 306, 307, 308, 309, 310, 311, 312, 314, 320, 323, 324, 326, 327, 410, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 706], "org.apache.commons.csv.CSVParserTest::testHeaderComment": [305, 306, 308, 309, 310, 311, 313, 314, 401, 410, 419, 428, 438, 448, 465, 474, 574, 671, 689, 758], "org.apache.commons.csv.CSVParserTest::testCarriageReturnLineFeedEndings": [401, 410, 419, 438, 448, 465, 474], "org.apache.commons.csv.CSVFormatTest::testSerialization": [401, 410, 419, 438, 448, 474, 492], "org.apache.commons.csv.CSVFormatTest::testEqualsDelimiter": [267], "org.apache.commons.csv.CSVPrinterTest::testParseCustomNullValues": [305, 306, 308, 309, 310, 311, 313, 401, 410, 419, 438, 448, 465, 474, 492, 574, 804], "org.apache.commons.csv.CSVPrinterTest::testExcelPrintAllIterableOfArrays": [492], "org.apache.commons.csv.CSVParserTest::testNoHeaderMap": [428], "org.apache.commons.csv.CSVPrinterTest::testSingleLineComment": [492], "org.apache.commons.csv.CSVPrinterTest::testExcelPrintAllArrayOfArrays": [492], "org.apache.commons.csv.CSVParserTest::testBackslashEscaping": [267, 305, 306, 308, 309, 310, 311, 313, 401, 410, 419, 438, 448, 465, 474, 720, 736, 771, 818, 834, 872], "org.apache.commons.csv.CSVParserTest::testHeader": [305, 306, 308, 309, 310, 311, 313, 314, 401, 410, 419, 428, 438, 448, 465, 474, 574, 758], "org.apache.commons.csv.CSVRecordTest::testRemoveAndAddColumns": [492], "org.apache.commons.csv.CSVParserTest::testForEach": [401, 410, 419, 438, 448, 465, 474, 574], "org.apache.commons.csv.CSVParserTest::testInvalidFormat": [243, 703, 704], "org.apache.commons.csv.CSVParserTest::testDefaultFormat": [401, 410, 419, 438, 448, 465, 474, 530], "org.apache.commons.csv.CSVFormatTest::testWithCommentStartCRThrowsException": [243, 255, 671, 686, 687], "org.apache.commons.csv.CSVParserTest::testGetRecords": [305, 306, 308, 309, 310, 311, 313, 401, 410, 419, 438, 448, 465, 474, 784], "org.apache.commons.csv.CSVPrinterTest::testMultiLineComment": [492], "org.apache.commons.csv.CSVParserTest::testGetHeaderMap": [305, 306, 308, 309, 310, 311, 313, 314, 401, 410, 419, 428, 438, 448, 465, 474, 758], "org.apache.commons.csv.CSVParserTest::testEmptyLineBehaviourExcel": [401, 410, 419, 438, 448, 465, 474], "org.apache.commons.csv.CSVFormatTest::testRFC4180": [401, 410, 419, 438, 474, 483, 492], "org.apache.commons.csv.CSVFormatTest::testEqualsQuoteChar": [818, 834], "org.apache.commons.csv.CSVParserTest::testGetRecordWithMultiLineValues": [305, 306, 308, 309, 310, 311, 313, 401, 410, 419, 438, 448, 465, 474, 872], "org.apache.commons.csv.CSVFormatTest::testQuotePolicyNoneWithoutEscapeThrowsException": [267, 307, 309, 646, 647, 847], "org.apache.commons.csv.CSVFormatTest::testQuoteCharSameAsDelimiterThrowsException": [305, 306, 621, 622, 706, 818, 834], "org.apache.commons.csv.CSVPrinterTest::testPrinter3": [492], "org.apache.commons.csv.CSVFormatTest::testEqualsIgnoreSurroundingSpaces": [784, 847], "org.apache.commons.csv.CSVParserTest::testEndOfFileBehaviourExcel": [401, 410, 419, 438, 448, 465, 474], "org.apache.commons.csv.CSVFormatTest::testWithHeader": [314, 428, 758], "org.apache.commons.csv.CSVParserTest::testProvidedHeaderAuto": [305, 306, 308, 309, 310, 311, 313, 314, 401, 410, 419, 428, 438, 448, 465, 474, 574, 758], "org.apache.commons.csv.CSVParserTest::testSkipAutoHeader": [305, 306, 308, 309, 310, 311, 313, 314, 401, 410, 419, 428, 438, 448, 465, 474, 574, 758], "org.apache.commons.csv.CSVFormatTest::testWithDelimiterLFThrowsException": [243, 703, 704], "org.apache.commons.csv.CSVFormatTest::testWithQuoteLFThrowsException": [243, 255, 818, 831, 832], "org.apache.commons.csv.CSVPrinterTest::testExcelPrinter2": [492], "org.apache.commons.csv.CSVFormatTest::testEqualsHeader": [758, 847], "org.apache.commons.csv.CSVPrinterTest::testQuoteNonNumeric": [492], "org.apache.commons.csv.CSVFormatTest::testWithCommentStart": [308, 401, 671, 689], "org.apache.commons.csv.CSVParserTest::testEmptyLineBehaviourCSV": [401, 410, 419, 438, 448, 465, 474], "org.apache.commons.csv.CSVFormatTest::testWithQuotePolicy": [307, 483, 847], "org.apache.commons.csv.CSVParserTest::testExcelFormat1": [401, 410, 419, 438, 448, 465, 474], "org.apache.commons.csv.CSVParserTest::testSkipSetHeader": [305, 306, 308, 309, 310, 311, 313, 314, 315, 401, 410, 419, 428, 438, 448, 465, 474, 501, 574, 758, 886], "org.apache.commons.csv.CSVFormatTest::testEqualsRecordSeparator": [847, 860, 872], "org.apache.commons.csv.CSVFormatTest::testWithEscape": [309, 419, 720, 736], "org.apache.commons.csv.CSVPrinterTest::testJdbcPrinter": [492], "org.apache.commons.csv.CSVParserTest::testIterator": [401, 410, 419, 438, 448, 465, 474, 574], "org.apache.commons.csv.CSVFormatTest::testEqualsEscape": [720, 736, 847], "org.apache.commons.csv.CSVPrinterTest::testPrinter7": [492], "org.apache.commons.csv.CSVParserTest::testEndOfFileBehaviorCSV": [401, 410, 419, 438, 448, 465, 474], "org.apache.commons.csv.CSVFormatTest::testFormat": [385, 388], "org.apache.commons.csv.CSVFormatTest::testEqualsCommentStart": [671, 689, 847], "org.apache.commons.csv.CSVFormatTest::testDelimiterSameAsCommentStartThrowsException": [305, 308, 631, 632, 671, 689, 706], "org.apache.commons.csv.CSVPrinterTest::testExcelPrintAllIterableOfLists": [492], "org.apache.commons.csv.CSVFormatTest::testEqualsIgnoreEmptyLines": [771, 847]}, "org.apache.commons.csv.CSVPrinter": {"org.apache.commons.csv.CSVPrinterTest::testNewCSVPrinterNullAppendableFormat": [60], "org.apache.commons.csv.CSVRecordTest::testRemoveAndAddColumns": [63, 434], "org.apache.commons.csv.CSVParserTest::testRoundtrip": [347], "org.apache.commons.csv.CSVPrinterTest::testNewCsvPrinterAppendableNullFormat": [61]}, "org.apache.commons.csv.Token": {"org.apache.commons.csv.CSVParserTest::testClose": [62], "org.apache.commons.csv.CSVParserTest::testGetOneLineCustomCollection": [62], "org.apache.commons.csv.CSVParserTest::testIgnoreEmptyLines": [62], "org.apache.commons.csv.CSVParserTest::testBackslashEscaping": [62], "org.apache.commons.csv.CSVParserTest::testEmptyLineBehaviourCSV": [62], "org.apache.commons.csv.CSVParserTest::testHeader": [62], "org.apache.commons.csv.CSVParserTest::testProvidedHeader": [62], "org.apache.commons.csv.CSVParserTest::testForEach": [62], "org.apache.commons.csv.CSVParserTest::testIterator": [62], "org.apache.commons.csv.CSVParserTest::testSkipAutoHeader": [62], "org.apache.commons.csv.CSVParserTest::testExcelFormat1": [62], "org.apache.commons.csv.CSVParserTest::testSkipSetHeader": [62], "org.apache.commons.csv.CSVParserTest::testGetRecords": [62], "org.apache.commons.csv.CSVParserTest::testRoundtrip": [62], "org.apache.commons.csv.CSVParserTest::testLineFeedEndings": [62], "org.apache.commons.csv.CSVParserTest::testGetHeaderMap": [62], "org.apache.commons.csv.CSVParserTest::testMultipleIterators": [62], "org.apache.commons.csv.CSVParserTest::testEmptyLineBehaviourExcel": [62], "org.apache.commons.csv.CSVParserTest::testCarriageReturnEndings": [62], "org.apache.commons.csv.CSVParserTest::testDuplicateHeaderEntries": [62], "org.apache.commons.csv.CSVParserTest::testGetRecordWithMultiLineValues": [62], "org.apache.commons.csv.CSVParserTest::testExcelFormat2": [62], "org.apache.commons.csv.CSVParserTest::testDefaultFormat": [62], "org.apache.commons.csv.CSVParserTest::testBackslashEscaping2": [62], "org.apache.commons.csv.CSVParserTest::testCarriageReturnLineFeedEndings": [62], "org.apache.commons.csv.CSVParserTest::testGetLine": [62], "org.apache.commons.csv.CSVParserTest::testEndOfFileBehaviourExcel": [62], "org.apache.commons.csv.CSVParserTest::testMappedButNotSetAsOutlook2007ContactExport": [62], "org.apache.commons.csv.CSVParserTest::testEndOfFileBehaviorCSV": [62], "org.apache.commons.csv.CSVParserTest::testProvidedHeaderAuto": [62], "org.apache.commons.csv.CSVPrinterTest::testParseCustomNullValues": [62], "org.apache.commons.csv.CSVParserTest::testHeaderComment": [62], "org.apache.commons.csv.CSVParserTest::testGetOneLineOneParser": [62], "org.apache.commons.csv.CSVParserTest::testGetOneLine": [62]}, "org.apache.commons.csv.Lexer": {"org.apache.commons.csv.CSVParserTest::testClose": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 118, 119, 120, 127, 132, 134, 142, 145, 149, 152, 160, 188, 189, 191, 195, 196, 198, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testGetOneLineCustomCollection": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 145, 149, 152, 160, 188, 191, 192, 193, 195, 196, 198, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testCarriageReturnLineFeedEndings": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 144, 145, 148, 149, 152, 160, 188, 189, 191, 192, 193, 195, 196, 198, 208, 291, 364, 366, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testLineFeedEndings": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 144, 145, 148, 149, 152, 160, 188, 189, 191, 192, 193, 195, 196, 198, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testBackslashEscaping": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 145, 149, 151, 152, 160, 188, 189, 191, 195, 196, 198, 199, 205, 208, 244, 246, 247, 253, 254, 256, 261, 262, 263, 265, 269, 270, 291, 317, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testEmptyLineBehaviourCSV": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 99, 100, 101, 103, 104, 112, 118, 132, 134, 142, 145, 148, 149, 151, 152, 160, 188, 191, 195, 196, 198, 208, 244, 246, 253, 254, 261, 262, 265, 269, 270, 291, 364, 366, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testHeader": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 145, 149, 152, 160, 188, 189, 191, 192, 193, 195, 196, 198, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testProvidedHeader": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 145, 149, 152, 160, 188, 189, 191, 192, 193, 195, 196, 198, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testForEach": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 145, 149, 152, 160, 188, 189, 191, 192, 193, 195, 196, 198, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testIterator": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 145, 149, 152, 160, 188, 189, 191, 192, 193, 195, 196, 198, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testSkipAutoHeader": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 118, 132, 134, 142, 145, 149, 152, 160, 188, 189, 191, 195, 196, 198, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testExcelFormat1": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 112, 113, 118, 132, 134, 142, 144, 145, 148, 149, 151, 152, 160, 188, 189, 191, 195, 196, 198, 208, 244, 246, 253, 254, 256, 261, 262, 263, 291, 364, 366, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testSkipSetHeader": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 118, 132, 134, 142, 145, 149, 152, 160, 188, 189, 191, 195, 196, 198, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testGetRecords": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 135, 136, 137, 142, 145, 148, 149, 151, 152, 160, 188, 189, 191, 195, 196, 198, 208, 244, 246, 253, 254, 256, 261, 262, 263, 291, 368, 379, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testRoundtrip": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 145, 149, 152, 160, 188, 189, 191, 195, 196, 198, 208, 291, 364, 366, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testCSV57": [62, 63, 68, 85, 88, 93, 96, 97, 112, 113, 368, 396, 400], "org.apache.commons.csv.CSVParserTest::testGetHeaderMap": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 145, 149, 152, 160, 188, 189, 191, 192, 193, 195, 196, 198, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testMultipleIterators": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 118, 132, 134, 142, 145, 149, 152, 160, 188, 189, 191, 192, 193, 195, 196, 198, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testEmptyLineBehaviourExcel": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 112, 113, 118, 132, 134, 142, 145, 148, 149, 151, 152, 160, 188, 191, 195, 196, 198, 208, 244, 246, 253, 254, 261, 262, 265, 269, 270, 291, 364, 366, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testCarriageReturnEndings": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 144, 145, 148, 149, 152, 160, 188, 189, 191, 192, 193, 195, 196, 198, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testDuplicateHeaderEntries": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 118, 132, 134, 142, 145, 149, 152, 160, 188, 189, 191, 195, 196, 198, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testGetRecordWithMultiLineValues": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 145, 149, 151, 244, 246, 253, 254, 261, 262, 263, 265, 266, 267, 269, 270, 291, 364, 366, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testExcelFormat2": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 112, 113, 118, 132, 134, 142, 145, 148, 149, 152, 160, 188, 189, 191, 195, 196, 198, 208, 291, 364, 366, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testDefaultFormat": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 145, 149, 151, 152, 160, 188, 189, 191, 195, 196, 198, 208, 244, 246, 253, 254, 261, 262, 263, 265, 269, 270, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testBackslashEscaping2": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 145, 149, 152, 160, 188, 189, 191, 195, 196, 198, 205, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testEmptyFile": [62, 63, 68, 85, 88, 93, 96, 97, 112, 113, 368, 396, 400], "org.apache.commons.csv.CSVParserTest::testGetLine": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 135, 136, 137, 142, 145, 148, 149, 151, 152, 160, 188, 189, 191, 195, 196, 198, 208, 244, 246, 253, 254, 256, 261, 262, 263, 291, 368, 379, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testEndOfFileBehaviourExcel": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 112, 113, 118, 132, 134, 142, 145, 148, 149, 151, 152, 155, 156, 160, 188, 191, 195, 196, 198, 208, 244, 246, 253, 254, 261, 262, 265, 266, 267, 269, 270, 291, 364, 366, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testMappedButNotSetAsOutlook2007ContactExport": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 145, 149, 152, 160, 188, 189, 191, 192, 193, 195, 196, 198, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testEndOfFileBehaviorCSV": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 99, 100, 101, 103, 112, 113, 118, 132, 134, 142, 145, 148, 149, 151, 152, 155, 156, 160, 188, 191, 195, 196, 198, 208, 244, 246, 253, 254, 261, 262, 265, 266, 267, 269, 270, 291, 364, 366, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testProvidedHeaderAuto": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 145, 149, 152, 160, 188, 189, 191, 192, 193, 195, 196, 198, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVPrinterTest::testParseCustomNullValues": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 145, 149, 152, 160, 188, 189, 191, 195, 196, 198, 208, 291, 364, 366, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testHeaderComment": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 119, 120, 127, 132, 134, 142, 145, 149, 152, 160, 188, 189, 191, 192, 193, 195, 196, 198, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testGetOneLineOneParser": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 118, 132, 134, 142, 145, 149, 152, 160, 188, 189, 191, 195, 196, 198, 208, 291, 364, 366, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testGetOneLine": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 112, 113, 118, 132, 134, 142, 145, 149, 152, 160, 188, 191, 192, 193, 195, 196, 198, 208, 291, 368, 389, 396, 400, 404, 408, 412], "org.apache.commons.csv.CSVParserTest::testIgnoreEmptyLines": [62, 63, 64, 65, 66, 67, 68, 85, 88, 93, 96, 97, 99, 100, 101, 103, 104, 112, 118, 132, 134, 142, 144, 145, 148, 149, 152, 160, 188, 189, 191, 195, 196, 198, 208, 291, 364, 366, 368, 389, 396, 400, 404, 408, 412]}, "org.apache.commons.csv.CSVRecord": {"org.apache.commons.csv.CSVParserTest::testGetOneLineCustomCollection": [54, 223], "org.apache.commons.csv.CSVParserTest::testProvidedHeader": [54, 55, 78, 99, 105, 150], "org.apache.commons.csv.CSVRecordTest::testGetInt": [54, 78], "org.apache.commons.csv.CSVRecordTest::testIsMapped": [55, 150], "org.apache.commons.csv.CSVRecordTest::testIterator": [54, 170, 205], "org.apache.commons.csv.CSVParserTest::testEmptyLineBehaviourCSV": [54, 223], "org.apache.commons.csv.CSVParserTest::testHeader": [54, 55, 78, 99, 105, 223], "org.apache.commons.csv.CSVRecordTest::testGetUnmappedName": [55, 99, 100, 101], "org.apache.commons.csv.CSVParserTest::testForEach": [54, 223], "org.apache.commons.csv.CSVRecordTest::testGetUnmappedEnum": [55, 67, 99, 100, 101], "org.apache.commons.csv.CSVParserTest::testSkipAutoHeader": [54, 55, 99, 105, 223], "org.apache.commons.csv.CSVParserTest::testExcelFormat1": [54, 223], "org.apache.commons.csv.CSVParserTest::testSkipSetHeader": [54, 55, 99, 105], "org.apache.commons.csv.CSVParserTest::testGetRecords": [54, 223], "org.apache.commons.csv.CSVParserTest::testRoundtrip": [54, 170, 205], "org.apache.commons.csv.CSVRecordTest::testGetString": [54, 55, 99, 105], "org.apache.commons.csv.CSVRecordTest::testIsConsistent": [54, 55, 139], "org.apache.commons.csv.CSVParserTest::testGetHeaderMap": [54, 55, 78, 99, 105], "org.apache.commons.csv.CSVParserTest::testDuplicateHeaderEntries": [54, 223], "org.apache.commons.csv.CSVParserTest::testMultipleIterators": [54, 78], "org.apache.commons.csv.CSVParserTest::testEmptyLineBehaviourExcel": [54, 223], "org.apache.commons.csv.CSVParserTest::testGetRecordWithMultiLineValues": [53, 129], "org.apache.commons.csv.CSVRecordTest::testGetStringInconsistentRecord": [54, 55, 99, 105, 107], "org.apache.commons.csv.CSVParserTest::testExcelFormat2": [54, 223], "org.apache.commons.csv.CSVParserTest::testIterator": [54, 223], "org.apache.commons.csv.CSVParserTest::testHeaderComment": [54, 55, 78, 99, 105, 223], "org.apache.commons.csv.CSVParserTest::testEndOfFileBehaviorCSV": [54, 223], "org.apache.commons.csv.CSVRecordTest::testGetStringNoHeader": [55, 95, 96], "org.apache.commons.csv.CSVParserTest::testGetLine": [54, 223], "org.apache.commons.csv.CSVRecordTest::testGetUnmappedNegativeInt": [54, 78], "org.apache.commons.csv.CSVParserTest::testEndOfFileBehaviourExcel": [54, 223], "org.apache.commons.csv.CSVParserTest::testMappedButNotSetAsOutlook2007ContactExport": [54, 55, 99, 105, 139, 150, 161], "org.apache.commons.csv.CSVRecordTest::testGetUnmappedPositiveInt": [54, 78], "org.apache.commons.csv.CSVParserTest::testProvidedHeaderAuto": [54, 55, 78, 99, 105, 150, 223], "org.apache.commons.csv.CSVPrinterTest::testParseCustomNullValues": [54, 78], "org.apache.commons.csv.CSVRecordTest::testIsSet": [54, 55, 150, 161], "org.apache.commons.csv.CSVParserTest::testGetOneLineOneParser": [54, 223], "org.apache.commons.csv.CSVParserTest::testGetOneLine": [54, 223]}, "org.apache.commons.csv.CSVParser": {"org.apache.commons.csv.CSVParserTest::testNoHeaderMap": [172, 241, 243, 289, 350, 351, 352, 379], "org.apache.commons.csv.CSVParserTest::testGetOneLineCustomCollection": [172, 213, 217, 241, 242, 248, 249, 250, 338, 339, 341, 450, 451, 454, 455, 456, 458, 464, 465, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testCarriageReturnLineFeedEndings": [172, 213, 217, 241, 242, 248, 249, 250, 318, 338, 339, 341, 450, 451, 454, 455, 456, 458, 461, 464, 465, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testEmptyFile": [172, 217, 242, 450, 455, 482, 490], "org.apache.commons.csv.CSVParserTest::testHeader": [213, 217, 241, 242, 243, 248, 249, 250, 351, 352, 353, 356, 358, 359, 360, 370, 371, 375, 379, 383, 395, 450, 451, 454, 455, 456, 458, 461, 464, 465, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testProvidedHeader": [213, 217, 241, 242, 243, 248, 249, 250, 351, 352, 353, 356, 366, 370, 371, 375, 379, 383, 395, 450, 451, 454, 455, 456, 458, 461, 464, 465, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testForEach": [213, 217, 241, 242, 248, 249, 250, 383, 395, 450, 451, 454, 455, 456, 458, 461, 464, 465, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testIterator": [213, 217, 241, 242, 248, 249, 250, 383, 395, 450, 451, 454, 455, 456, 458, 461, 464, 465, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testCarriageReturnEndings": [172, 213, 217, 241, 242, 248, 249, 250, 318, 338, 339, 341, 450, 451, 454, 455, 456, 458, 461, 464, 465, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testDefaultFormat": [172, 213, 217, 241, 242, 248, 249, 250, 318, 338, 339, 341, 450, 451, 454, 455, 456, 458, 461, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testGetRecords": [172, 213, 217, 241, 242, 248, 249, 250, 318, 338, 339, 341, 450, 451, 454, 455, 456, 458, 461, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testLineFeedEndings": [172, 213, 217, 241, 242, 248, 249, 250, 318, 338, 339, 341, 450, 451, 454, 455, 456, 458, 461, 464, 465, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testMultipleIterators": [172, 213, 217, 241, 242, 248, 249, 250, 395, 451, 454, 455, 456, 458, 461, 464, 465, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testParseFileNullFormat": [150], "org.apache.commons.csv.CSVParserTest::testGetHeaderMap": [172, 213, 217, 241, 242, 243, 248, 249, 250, 289, 351, 352, 353, 356, 366, 370, 371, 375, 379, 383, 395, 450, 451, 454, 455, 456, 458, 461, 464, 465, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testEmptyLineBehaviourExcel": [172, 213, 217, 241, 242, 248, 249, 250, 318, 338, 339, 341, 450, 451, 454, 455, 456, 458, 461, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testParseStringNullFormat": [170], "org.apache.commons.csv.CSVParserTest::testGetRecordWithMultiLineValues": [172, 213, 217, 241, 242, 248, 249, 250, 278, 302, 450, 451, 454, 455, 456, 458, 461, 464, 465, 482, 484, 485, 487, 490], "org.apache.commons.csv.CSVParserTest::testParseNullUrlCharsetFormat": [196], "org.apache.commons.csv.CSVParserTest::testBackslashEscaping2": [172, 213, 217, 241, 242, 248, 249, 250, 318, 338, 339, 341, 450, 451, 454, 455, 456, 458, 461, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testBackslashEscaping": [172, 213, 217, 241, 242, 248, 249, 250, 318, 338, 339, 341, 450, 451, 454, 455, 456, 458, 461, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testGetLine": [172, 213, 217, 241, 242, 248, 249, 250, 450, 451, 454, 455, 456, 458, 461, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testEndOfFileBehaviorCSV": [172, 213, 217, 241, 242, 248, 249, 250, 318, 338, 339, 341, 450, 451, 454, 455, 456, 458, 461, 464, 465, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testNewCSVParserReaderNullFormat": [238], "org.apache.commons.csv.CSVParserTest::testProvidedHeaderAuto": [213, 217, 241, 242, 243, 248, 249, 250, 351, 352, 353, 356, 358, 359, 360, 370, 371, 375, 379, 383, 395, 450, 451, 454, 455, 456, 458, 461, 464, 465, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testSkipAutoHeader": [213, 217, 241, 242, 243, 248, 249, 250, 351, 352, 353, 356, 358, 359, 360, 370, 371, 375, 379, 395, 451, 454, 455, 456, 458, 461, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testGetOneLineOneParser": [213, 217, 241, 242, 248, 249, 250, 451, 454, 455, 456, 458, 461, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testGetOneLine": [172, 213, 217, 241, 242, 248, 249, 250, 318, 338, 339, 341, 450, 451, 454, 455, 456, 458, 464, 465, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testMappedButNotSetAsOutlook2007ContactExport": [213, 217, 241, 242, 243, 248, 249, 250, 351, 352, 353, 356, 363, 364, 366, 370, 371, 375, 379, 383, 395, 450, 451, 454, 455, 456, 458, 461, 464, 465, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testClose": [213, 217, 241, 242, 243, 248, 249, 250, 351, 352, 356, 358, 383, 395, 451, 454, 455, 456, 458, 461, 477, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testParseNullStringFormat": [169], "org.apache.commons.csv.CSVParserTest::testEmptyLineBehaviourCSV": [172, 213, 217, 241, 242, 248, 249, 250, 318, 338, 339, 341, 450, 451, 454, 455, 456, 458, 461, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testExcelFormat1": [172, 213, 217, 241, 242, 248, 249, 250, 318, 338, 339, 341, 450, 451, 454, 455, 456, 458, 461, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testSkipSetHeader": [213, 217, 241, 242, 243, 248, 249, 250, 351, 352, 353, 356, 363, 364, 366, 370, 371, 375, 379, 395, 451, 454, 455, 456, 458, 461, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testRoundtrip": [172, 213, 217, 241, 242, 248, 249, 250, 383, 395, 450, 451, 454, 455, 456, 458, 461, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testCSV57": [172, 217, 242, 318, 338, 341, 450, 455, 482, 490], "org.apache.commons.csv.CSVParserTest::testDuplicateHeaderEntries": [172, 213, 217, 241, 242, 243, 248, 249, 250, 351, 352, 353, 356, 358, 359, 360, 370, 371, 372, 373, 375, 451, 454, 455, 456, 458, 461, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testParseNullFileFormat": [149], "org.apache.commons.csv.CSVParserTest::testParserUrlNullCharsetFormat": [197], "org.apache.commons.csv.CSVParserTest::testExcelFormat2": [172, 213, 217, 241, 242, 248, 249, 250, 318, 338, 339, 341, 450, 451, 454, 455, 456, 458, 461, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testIgnoreEmptyLines": [172, 213, 217, 241, 242, 248, 249, 250, 318, 338, 339, 341, 450, 451, 454, 455, 456, 458, 461, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testParseUrlCharsetNullFormat": [198], "org.apache.commons.csv.CSVParserTest::testNewCSVParserNullReaderFormat": [237], "org.apache.commons.csv.CSVParserTest::testEndOfFileBehaviourExcel": [172, 213, 217, 241, 242, 248, 249, 250, 318, 338, 339, 341, 450, 451, 454, 455, 456, 458, 461, 464, 465, 482, 484, 487, 490], "org.apache.commons.csv.CSVPrinterTest::testParseCustomNullValues": [213, 217, 241, 242, 248, 249, 252, 383, 395, 450, 451, 454, 455, 456, 458, 461, 482, 484, 487, 490], "org.apache.commons.csv.CSVParserTest::testHeaderComment": [213, 217, 241, 242, 243, 248, 249, 250, 351, 352, 353, 356, 358, 359, 360, 370, 371, 375, 379, 383, 395, 450, 451, 454, 455, 456, 458, 461, 464, 465, 477, 482, 484, 487, 490]}, "org.apache.commons.csv.Assertions": {"org.apache.commons.csv.CSVParserTest::testParseNullUrlCharsetFormat": [32, 33], "org.apache.commons.csv.CSVParserTest::testParserUrlNullCharsetFormat": [32, 33], "org.apache.commons.csv.CSVParserTest::testParseNullStringFormat": [32, 33], "org.apache.commons.csv.CSVParserTest::testNewCSVParserReaderNullFormat": [32, 33], "org.apache.commons.csv.CSVPrinterTest::testNewCsvPrinterAppendableNullFormat": [32, 33], "org.apache.commons.csv.CSVParserTest::testParseFileNullFormat": [32, 33], "org.apache.commons.csv.CSVPrinterTest::testNewCSVPrinterNullAppendableFormat": [32, 33], "org.apache.commons.csv.CSVParserTest::testParseUrlCharsetNullFormat": [32, 33], "org.apache.commons.csv.CSVParserTest::testParseNullFileFormat": [32, 33], "org.apache.commons.csv.CSVParserTest::testParseStringNullFormat": [32, 33], "org.apache.commons.csv.CSVParserTest::testNewCSVParserNullReaderFormat": [32, 33]}, "org.apache.commons.csv.ExtendedBufferedReader": {"org.apache.commons.csv.CSVParserTest::testClose": [40, 56, 60, 61, 73, 118, 120, 121, 127], "org.apache.commons.csv.CSVParserTest::testGetOneLineCustomCollection": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVParserTest::testCarriageReturnLineFeedEndings": [40, 51, 56, 60, 61, 73, 140, 141, 142, 144], "org.apache.commons.csv.CSVParserTest::testLineFeedEndings": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVParserTest::testBackslashEscaping": [40, 51, 56, 60, 61, 73, 140, 141, 142, 144], "org.apache.commons.csv.CSVParserTest::testEmptyLineBehaviourCSV": [40, 51, 56, 60, 61, 73, 140, 141, 142, 144], "org.apache.commons.csv.CSVParserTest::testHeader": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVParserTest::testProvidedHeader": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVParserTest::testForEach": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVParserTest::testIterator": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVParserTest::testSkipAutoHeader": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVParserTest::testExcelFormat1": [40, 51, 56, 60, 61, 73, 140, 141, 142, 144], "org.apache.commons.csv.CSVParserTest::testSkipSetHeader": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVParserTest::testGetRecords": [40, 51, 56, 60, 61, 73, 140, 141, 142, 144], "org.apache.commons.csv.CSVParserTest::testRoundtrip": [40, 51, 56, 60, 61, 73, 140, 141, 142, 144], "org.apache.commons.csv.CSVParserTest::testCSV57": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVParserTest::testGetHeaderMap": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVParserTest::testMultipleIterators": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVParserTest::testEmptyLineBehaviourExcel": [40, 51, 56, 60, 61, 73, 140, 141, 142, 144], "org.apache.commons.csv.CSVParserTest::testCarriageReturnEndings": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVParserTest::testDuplicateHeaderEntries": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVParserTest::testGetRecordWithMultiLineValues": [40, 51, 56, 60, 61, 73, 140, 141, 142, 144], "org.apache.commons.csv.CSVParserTest::testExcelFormat2": [40, 51, 56, 60, 61, 73, 140, 141, 142, 144], "org.apache.commons.csv.CSVParserTest::testDefaultFormat": [40, 51, 56, 60, 61, 73, 140, 141, 142, 144], "org.apache.commons.csv.CSVParserTest::testBackslashEscaping2": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVParserTest::testEmptyFile": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVParserTest::testGetLine": [40, 51, 56, 60, 61, 73, 140, 141, 142, 144], "org.apache.commons.csv.CSVParserTest::testEndOfFileBehaviourExcel": [40, 51, 56, 60, 61, 73, 140, 141, 142, 144], "org.apache.commons.csv.CSVParserTest::testMappedButNotSetAsOutlook2007ContactExport": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVParserTest::testEndOfFileBehaviorCSV": [40, 51, 56, 60, 61, 73, 140, 141, 142, 144], "org.apache.commons.csv.CSVParserTest::testProvidedHeaderAuto": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVPrinterTest::testParseCustomNullValues": [40, 51, 56, 60, 61, 73, 141, 144], "org.apache.commons.csv.CSVParserTest::testHeaderComment": [40, 56, 60, 61, 73, 118, 120, 121, 127], "org.apache.commons.csv.CSVParserTest::testGetOneLineOneParser": [40, 51, 56, 60, 61, 73, 140, 141, 142, 144], "org.apache.commons.csv.CSVParserTest::testGetOneLine": [40, 56, 60, 61, 73], "org.apache.commons.csv.CSVParserTest::testIgnoreEmptyLines": [40, 51, 56, 60, 61, 73, 140, 141, 142, 144]}}